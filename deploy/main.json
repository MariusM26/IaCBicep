{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "1006409700675327115"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "WestEurope"
    },
    "env": {
      "type": "string",
      "defaultValue": "dev"
    }
  },
  "resources": {
    "resourceGroupMonitoring": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resourceGroupMonitoring-{0}', uniqueString('resourceGroupMonitoring', deployment().name))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentType": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2885531932752422763"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "environmentType": {
              "type": "string"
            }
          },
          "resources": {
            "monitoringRG": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2025-04-01",
              "name": "rg-dev-monitoring",
              "location": "[parameters('location')]"
            },
            "laWorkspace": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('laWorkspace-{0}', uniqueString('laWorkspace', deployment().name))]",
              "resourceGroup": "rg-dev-monitoring",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentType": {
                    "value": "[parameters('environmentType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "6325490845962604044"
                    }
                  },
                  "parameters": {
                    "environmentType": {
                      "type": "string",
                      "allowedValues": [
                        "dev",
                        "test",
                        "prod"
                      ],
                      "metadata": {
                        "description": "The environment in which the deployment is done.)"
                      }
                    }
                  },
                  "variables": {
                    "retentionInDays": 30,
                    "location": "WestEurope",
                    "workspaceName": "[format('la-{0}', parameters('environmentType'))]"
                  },
                  "resources": {
                    "workspace": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "workspaceDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('workspaceName')]"
                          },
                          "location": {
                            "value": "[variables('location')]"
                          },
                          "dataRetention": {
                            "value": "[variables('retentionInDays')]"
                          },
                          "dailyQuotaGb": {
                            "value": 1
                          },
                          "tags": {
                            "value": {
                              "Environment": "[parameters('environmentType')]",
                              "Role": "DeploymentValidation"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1749032521457140145"
                            },
                            "name": "Log Analytics Workspaces",
                            "description": "This module deploys a Log Analytics Workspace."
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "useThisWorkspace": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              }
                            },
                            "gallerySolutionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                                  }
                                },
                                "plan": {
                                  "$ref": "#/definitions/solutionPlanType",
                                  "metadata": {
                                    "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the gallery solutions to be created in the log analytics workspace."
                              }
                            },
                            "storageInsightsConfigType": {
                              "type": "object",
                              "properties": {
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the storage account to be linked."
                                  }
                                },
                                "containers": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The names of the blob containers that the workspace should read."
                                  }
                                },
                                "tables": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of tables to be read by the workspace."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the storage insights configuration."
                              }
                            },
                            "linkedServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the linked service."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                  }
                                },
                                "writeAccessResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the linked service."
                              }
                            },
                            "linkedStorageAccountType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the link."
                                  }
                                },
                                "storageAccountIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minLength": 1,
                                  "metadata": {
                                    "description": "Required. Linked storage accounts resources Ids."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the linked storage account."
                              }
                            },
                            "savedSearchType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the saved search."
                                  }
                                },
                                "etag": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                  }
                                },
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The category of the saved search. This helps the user to find a saved search faster."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Display name for the search."
                                  }
                                },
                                "functionAlias": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The function alias if query serves as a function."
                                  }
                                },
                                "functionParameters": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                  }
                                },
                                "query": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The query expression for the saved search."
                                  }
                                },
                                "tags": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The tags attached to the saved search."
                                  }
                                },
                                "version": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version number of the query language. The current version is 2 and is the default."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the saved search."
                              }
                            },
                            "dataExportType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the data export."
                                  }
                                },
                                "destination": {
                                  "$ref": "#/definitions/destinationType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The destination of the data export."
                                  }
                                },
                                "enable": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the data export."
                                  }
                                },
                                "tableNames": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. The list of table names to export."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the data export."
                              }
                            },
                            "dataSourceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the data source."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The kind of data source."
                                  }
                                },
                                "linkedResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource id of the resource that will be linked to the workspace."
                                  }
                                },
                                "eventLogName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the event log to configure when kind is WindowsEvent."
                                  }
                                },
                                "eventTypes": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The event types to configure when kind is WindowsEvent."
                                  }
                                },
                                "objectName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "instanceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "intervalSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                  }
                                },
                                "performanceCounters": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                  }
                                },
                                "counterName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                  }
                                },
                                "state": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                  }
                                },
                                "syslogName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. System log to configure when kind is LinuxSyslog."
                                  }
                                },
                                "syslogSeverities": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                                    },
                                    "description": "Optional. Tags to configure in the resource."
                                  },
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the data source."
                              }
                            },
                            "tableType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the table."
                                  }
                                },
                                "plan": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The plan for the table."
                                  }
                                },
                                "restoredLogs": {
                                  "$ref": "#/definitions/restoredLogsType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The restored logs for the table."
                                  }
                                },
                                "schema": {
                                  "$ref": "#/definitions/schemaType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The schema for the table."
                                  }
                                },
                                "searchResults": {
                                  "$ref": "#/definitions/searchResultsType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The search results for the table."
                                  }
                                },
                                "retentionInDays": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The retention in days for the table."
                                  }
                                },
                                "totalRetentionInDays": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The total retention in days for the table."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The role assignments for the table."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Properties of the custom table."
                              }
                            },
                            "workspaceFeaturesType": {
                              "type": "object",
                              "properties": {
                                "disableLocalAuth": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Disable Non-EntraID based Auth. Default is true."
                                  }
                                },
                                "enableDataExport": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Flag that indicate if data should be exported."
                                  }
                                },
                                "enableLogAccessUsingOnlyResourcePermissions": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable log access using only resource permissions. Default is false."
                                  }
                                },
                                "immediatePurgeDataOn30Days": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Flag that describes if we want to remove the data after 30 days."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Features of the workspace."
                              }
                            },
                            "workspaceReplicationType": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether the replication is enabled or not. When true, workspace configuration and data is replicated to the specified location."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Conditional. The location to which the workspace is replicated. Required if replication is enabled."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Replication properties of the workspace."
                              }
                            },
                            "_1.columnType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The column name."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "boolean",
                                    "dateTime",
                                    "dynamic",
                                    "guid",
                                    "int",
                                    "long",
                                    "real",
                                    "string"
                                  ],
                                  "metadata": {
                                    "description": "Required. The column type."
                                  }
                                },
                                "dataTypeHint": {
                                  "type": "string",
                                  "allowedValues": [
                                    "armPath",
                                    "guid",
                                    "ip",
                                    "uri"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The column data type logical hint."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The column description."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Column display name."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the table column.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "destinationType": {
                              "type": "object",
                              "properties": {
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The destination resource ID."
                                  }
                                },
                                "metaData": {
                                  "type": "object",
                                  "properties": {
                                    "eventHubName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The destination metadata."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The data export destination properties.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "data-export/main.bicep"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "restoredLogsType": {
                              "type": "object",
                              "properties": {
                                "sourceTable": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table to restore data from."
                                  }
                                },
                                "startRestoreTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to start the restore from (UTC)."
                                  }
                                },
                                "endRestoreTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to end the restore by (UTC)."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the restore operation that initiated the table.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "schemaType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The table name."
                                  }
                                },
                                "columns": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.columnType"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of table custom columns."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table description."
                                  }
                                },
                                "displayName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The table display name."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The table schema.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "searchResultsType": {
                              "type": "object",
                              "properties": {
                                "query": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The search job query."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The search description."
                                  }
                                },
                                "limit": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Limit the search job to return up to specified number of rows."
                                  }
                                },
                                "startSearchTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to start the search from (UTC)."
                                  }
                                },
                                "endSearchTime": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The timestamp to end the search by (UTC)."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The parameters of the search job that initiated the table.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "table/main.bicep"
                                }
                              }
                            },
                            "solutionPlanType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                                  }
                                },
                                "product": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                                  }
                                },
                                "publisher": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/operations-management/solution:0.3.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "PerGB2018",
                              "allowedValues": [
                                "CapacityReservation",
                                "Free",
                                "LACluster",
                                "PerGB2018",
                                "PerNode",
                                "Premium",
                                "Standalone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the SKU."
                              }
                            },
                            "skuCapacityReservationLevel": {
                              "type": "int",
                              "defaultValue": 100,
                              "minValue": 100,
                              "maxValue": 5000,
                              "metadata": {
                                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                              }
                            },
                            "storageInsightsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/storageInsightsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of storage accounts to be read by the workspace."
                              }
                            },
                            "linkedServices": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/linkedServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of services to be linked."
                              }
                            },
                            "linkedStorageAccounts": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/linkedStorageAccountType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                              }
                            },
                            "savedSearches": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/savedSearchType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Kusto Query Language searches to save."
                              }
                            },
                            "dataExports": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/dataExportType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW data export instances to be deployed."
                              }
                            },
                            "dataSources": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/dataSourceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW data sources to configure."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/tableType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. LAW custom tables to be deployed."
                              }
                            },
                            "gallerySolutions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/gallerySolutionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                              }
                            },
                            "onboardWorkspaceToSentinel": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Onboard the Log Analytics Workspace to Sentinel. Requires 'SecurityInsights' solution to be in gallerySolutions."
                              }
                            },
                            "dataRetention": {
                              "type": "int",
                              "defaultValue": 365,
                              "minValue": 0,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. Number of days data will be retained for."
                              }
                            },
                            "dailyQuotaGb": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "metadata": {
                                "description": "Optional. The workspace daily quota for ingestion."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics ingestion."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics query."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                              }
                            },
                            "features": {
                              "$ref": "#/definitions/workspaceFeaturesType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The workspace features."
                              }
                            },
                            "replication": {
                              "$ref": "#/definitions/workspaceReplicationType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The workspace replication properties."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "forceCmkForQuery": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.OperationalInsights/workspaces@2025-02-01#properties/tags"
                                },
                                "description": "Optional. Tags of the resource."
                              },
                              "nullable": true
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.12.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2025-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "features": {
                                  "searchVersion": 1,
                                  "enableLogAccessUsingOnlyResourcePermissions": "[coalesce(tryGet(parameters('features'), 'enableLogAccessUsingOnlyResourcePermissions'), false())]",
                                  "disableLocalAuth": "[coalesce(tryGet(parameters('features'), 'disableLocalAuth'), true())]",
                                  "enableDataExport": "[tryGet(parameters('features'), 'enableDataExport')]",
                                  "immediatePurgeDataOn30Days": "[tryGet(parameters('features'), 'immediatePurgeDataOn30Days')]"
                                },
                                "sku": {
                                  "name": "[parameters('skuName')]",
                                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                                },
                                "retentionInDays": "[parameters('dataRetention')]",
                                "workspaceCapping": {
                                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                                },
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "forceCmkForQuery": "[parameters('forceCmkForQuery')]",
                                "replication": "[parameters('replication')]"
                              },
                              "identity": "[variables('identity')]"
                            },
                            "logAnalyticsWorkspace_diagnosticSettings": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_sentinelOnboarding": {
                              "condition": "[and(not(empty(filter(coalesce(parameters('gallerySolutions'), createArray()), lambda('item', startsWith(lambdaVariables('item').name, 'SecurityInsights'))))), parameters('onboardWorkspaceToSentinel'))]",
                              "type": "Microsoft.SecurityInsights/onboardingStates",
                              "apiVersion": "2024-03-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {},
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_roleAssignments": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_storageInsightConfigs": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                                "count": "[length(coalesce(parameters('storageInsightsConfigs'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'containers')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'tables')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()].storageAccountResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "1306323182548882150"
                                    },
                                    "name": "Log Analytics Workspace Storage Insight Configs",
                                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config."
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the storage insights config."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The names of the blob containers that the workspace should read."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The names of the Azure tables that the workspace should read."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs@2025-02-01#properties/tags"
                                        },
                                        "description": "Optional. Tags to configure in the resource."
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                    },
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "storageinsightconfig": {
                                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "containers": "[parameters('containers')]",
                                        "tables": "[parameters('tables')]",
                                        "storageAccount": {
                                          "id": "[parameters('storageAccountResourceId')]",
                                          "key": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed storage insights configuration."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the storage insight configuration is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the storage insights configuration."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedServices": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedServices",
                                "count": "[length(coalesce(parameters('linkedServices'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('linkedServices'), createArray())[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'resourceId')]"
                                  },
                                  "writeAccessResourceId": {
                                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'writeAccessResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "5230241501765697269"
                                    },
                                    "name": "Log Analytics Workspace Linked Services",
                                    "description": "This module deploys a Log Analytics Workspace Linked Service."
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    },
                                    "writeAccessResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.OperationalInsights/workspaces/linkedServices@2025-02-01#properties/tags"
                                        },
                                        "description": "Optional. Tags to configure in the resource."
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedService": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resourceId": "[parameters('resourceId')]",
                                        "writeAccessResourceId": "[parameters('writeAccessResourceId')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked service."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked service is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedStorageAccounts": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                                "count": "[length(coalesce(parameters('linkedStorageAccounts'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].name]"
                                  },
                                  "storageAccountIds": {
                                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].storageAccountIds]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "10372135754202496594"
                                    },
                                    "name": "Log Analytics Workspace Linked Storage Accounts",
                                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account."
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Query",
                                        "Alerts",
                                        "CustomLogs",
                                        "AzureWatson"
                                      ],
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "storageAccountIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. Linked storage accounts resources Ids."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedStorageAccount": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "storageAccountIds": "[parameters('storageAccountIds')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked storage account."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked storage account."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked storage account is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_savedSearches": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_savedSearches",
                                "count": "[length(coalesce(parameters('savedSearches'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[format('{0}{1}', coalesce(parameters('savedSearches'), createArray())[copyIndex()].name, uniqueString(deployment().name))]"
                                  },
                                  "etag": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'etag')]"
                                  },
                                  "displayName": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].displayName]"
                                  },
                                  "category": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].category]"
                                  },
                                  "query": {
                                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].query]"
                                  },
                                  "functionAlias": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionAlias')]"
                                  },
                                  "functionParameters": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionParameters')]"
                                  },
                                  "tags": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'tags')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'version')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "9015459905306126128"
                                    },
                                    "name": "Log Analytics Workspace Saved Searches",
                                    "description": "This module deploys a Log Analytics Workspace Saved Search."
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the saved search."
                                      }
                                    },
                                    "displayName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Display name for the search."
                                      }
                                    },
                                    "category": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Query category."
                                      }
                                    },
                                    "query": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Kusto Query to be stored."
                                      }
                                    },
                                    "tags": {
                                      "type": "array",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.OperationalInsights/workspaces/savedSearches@2025-02-01#properties/properties/properties/tags"
                                        },
                                        "description": "Optional. Tags to configure in the resource."
                                      },
                                      "nullable": true
                                    },
                                    "functionAlias": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The function alias if query serves as a function."
                                      }
                                    },
                                    "functionParameters": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version number of the query language."
                                      }
                                    },
                                    "etag": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "savedSearch": {
                                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "etag": "[parameters('etag')]",
                                        "tags": "[coalesce(parameters('tags'), createArray())]",
                                        "displayName": "[parameters('displayName')]",
                                        "category": "[parameters('category')]",
                                        "query": "[parameters('query')]",
                                        "functionAlias": "[parameters('functionAlias')]",
                                        "functionParameters": "[parameters('functionParameters')]",
                                        "version": "[parameters('version')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed saved search."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the saved search is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed saved search."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace",
                                "logAnalyticsWorkspace_linkedStorageAccounts"
                              ]
                            },
                            "logAnalyticsWorkspace_dataExports": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataExports",
                                "count": "[length(coalesce(parameters('dataExports'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('dataExports'), createArray())[copyIndex()].name]"
                                  },
                                  "destination": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'destination')]"
                                  },
                                  "enable": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'enable')]"
                                  },
                                  "tableNames": {
                                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'tableNames')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "8586520532175356447"
                                    },
                                    "name": "Log Analytics Workspace Data Exports",
                                    "description": "This module deploys a Log Analytics Workspace Data Export."
                                  },
                                  "definitions": {
                                    "destinationType": {
                                      "type": "object",
                                      "properties": {
                                        "resourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The destination resource ID."
                                          }
                                        },
                                        "metaData": {
                                          "type": "object",
                                          "properties": {
                                            "eventHubName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The destination metadata."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The data export destination properties."
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 4,
                                      "maxLength": 63,
                                      "metadata": {
                                        "description": "Required. The data export rule name."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "destination": {
                                      "$ref": "#/definitions/destinationType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Destination properties."
                                      }
                                    },
                                    "enable": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Active when enabled."
                                      }
                                    },
                                    "tableNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "dataExport": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "destination": "[parameters('destination')]",
                                        "enable": "[parameters('enable')]",
                                        "tableNames": "[parameters('tableNames')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the data export."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the data export."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the data export was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_dataSources": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataSources",
                                "count": "[length(coalesce(parameters('dataSources'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].name]"
                                  },
                                  "kind": {
                                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].kind]"
                                  },
                                  "linkedResourceId": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'linkedResourceId')]"
                                  },
                                  "eventLogName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventLogName')]"
                                  },
                                  "eventTypes": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventTypes')]"
                                  },
                                  "objectName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'objectName')]"
                                  },
                                  "instanceName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'instanceName')]"
                                  },
                                  "intervalSeconds": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'intervalSeconds')]"
                                  },
                                  "counterName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'counterName')]"
                                  },
                                  "state": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'state')]"
                                  },
                                  "syslogName": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogName')]"
                                  },
                                  "syslogSeverities": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogSeverities')]"
                                  },
                                  "performanceCounters": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'performanceCounters')]"
                                  },
                                  "tags": {
                                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "8336916453932906250"
                                    },
                                    "name": "Log Analytics Workspace Datasources",
                                    "description": "This module deploys a Log Analytics Workspace Data Source."
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the data source."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "AzureActivityLog",
                                      "allowedValues": [
                                        "AzureActivityLog",
                                        "WindowsEvent",
                                        "WindowsPerformanceCounter",
                                        "IISLogs",
                                        "LinuxSyslog",
                                        "LinuxSyslogCollection",
                                        "LinuxPerformanceObject",
                                        "LinuxPerformanceCollection"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The kind of the data source."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                                        },
                                        "description": "Optional. Tags to configure in the resource."
                                      },
                                      "nullable": true
                                    },
                                    "linkedResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the resource to be linked."
                                      }
                                    },
                                    "eventLogName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "eventTypes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "objectName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "instanceName": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "intervalSeconds": {
                                      "type": "int",
                                      "defaultValue": 60,
                                      "metadata": {
                                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "performanceCounters": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                      }
                                    },
                                    "counterName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                      }
                                    },
                                    "state": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                      }
                                    },
                                    "syslogName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                                      }
                                    },
                                    "syslogSeverities": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "dataSource": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed data source."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the data source is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed data source."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_tables": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_tables",
                                "count": "[length(coalesce(parameters('tables'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                                  },
                                  "plan": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'plan')]"
                                  },
                                  "schema": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'schema')]"
                                  },
                                  "retentionInDays": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'retentionInDays')]"
                                  },
                                  "totalRetentionInDays": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'totalRetentionInDays')]"
                                  },
                                  "restoredLogs": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'restoredLogs')]"
                                  },
                                  "searchResults": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'searchResults')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "315390662258960765"
                                    },
                                    "name": "Log Analytics Workspace Tables",
                                    "description": "This module deploys a Log Analytics Workspace Table."
                                  },
                                  "definitions": {
                                    "restoredLogsType": {
                                      "type": "object",
                                      "properties": {
                                        "sourceTable": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table to restore data from."
                                          }
                                        },
                                        "startRestoreTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to start the restore from (UTC)."
                                          }
                                        },
                                        "endRestoreTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to end the restore by (UTC)."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the restore operation that initiated the table."
                                      }
                                    },
                                    "schemaType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The table name."
                                          }
                                        },
                                        "columns": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/columnType"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of table custom columns."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table description."
                                          }
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The table display name."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The table schema."
                                      }
                                    },
                                    "columnType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The column name."
                                          }
                                        },
                                        "type": {
                                          "type": "string",
                                          "allowedValues": [
                                            "boolean",
                                            "dateTime",
                                            "dynamic",
                                            "guid",
                                            "int",
                                            "long",
                                            "real",
                                            "string"
                                          ],
                                          "metadata": {
                                            "description": "Required. The column type."
                                          }
                                        },
                                        "dataTypeHint": {
                                          "type": "string",
                                          "allowedValues": [
                                            "armPath",
                                            "guid",
                                            "ip",
                                            "uri"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The column data type logical hint."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The column description."
                                          }
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Column display name."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the table column."
                                      }
                                    },
                                    "searchResultsType": {
                                      "type": "object",
                                      "properties": {
                                        "query": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The search job query."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The search description."
                                          }
                                        },
                                        "limit": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Limit the search job to return up to specified number of rows."
                                          }
                                        },
                                        "startSearchTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to start the search from (UTC)."
                                          }
                                        },
                                        "endSearchTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The timestamp to end the search by (UTC)."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The parameters of the search job that initiated the table."
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the table."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "plan": {
                                      "type": "string",
                                      "defaultValue": "Analytics",
                                      "allowedValues": [
                                        "Basic",
                                        "Analytics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                                      }
                                    },
                                    "restoredLogs": {
                                      "$ref": "#/definitions/restoredLogsType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Restore parameters."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 730,
                                      "metadata": {
                                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                                      }
                                    },
                                    "schema": {
                                      "$ref": "#/definitions/schemaType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Table's schema."
                                      }
                                    },
                                    "searchResults": {
                                      "$ref": "#/definitions/searchResultsType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Parameters of the search job that initiated this table."
                                      }
                                    },
                                    "totalRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2555,
                                      "metadata": {
                                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2025-02-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                                      "apiVersion": "2025-02-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "plan": "[parameters('plan')]",
                                        "restoredLogs": "[parameters('restoredLogs')]",
                                        "retentionInDays": "[parameters('retentionInDays')]",
                                        "schema": "[parameters('schema')]",
                                        "searchResults": "[parameters('searchResults')]",
                                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                                      }
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the table."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the table."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the table was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_solutions": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_solutions",
                                "count": "[length(coalesce(parameters('gallerySolutions'), createArray()))]"
                              },
                              "condition": "[not(empty(parameters('gallerySolutions')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].name]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "plan": {
                                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].plan]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "10255889523646649592"
                                    },
                                    "name": "Operations Management Solutions",
                                    "description": "This module deploys an Operations Management Solution.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "solutionPlanType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                                          }
                                        },
                                        "product": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                                          }
                                        },
                                        "publisher": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                                      }
                                    },
                                    "plan": {
                                      "$ref": "#/definitions/solutionPlanType",
                                      "metadata": {
                                        "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                                      }
                                    },
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "logAnalyticsWorkspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2021-06-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "solution": {
                                      "type": "Microsoft.OperationsManagement/solutions",
                                      "apiVersion": "2015-11-01-preview",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                                      },
                                      "plan": {
                                        "name": "[coalesce(tryGet(parameters('plan'), 'name'), parameters('name'))]",
                                        "promotionCode": "",
                                        "product": "[parameters('plan').product]",
                                        "publisher": "[coalesce(tryGet(parameters('plan'), 'publisher'), 'Microsoft')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed solution."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed solution."
                                      },
                                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the solution is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('solution', '2015-11-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed log analytics workspace."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed log analytics workspace."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed log analytics workspace."
                              },
                              "value": "[parameters('name')]"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ID associated with the workspace."
                              },
                              "value": "[reference('logAnalyticsWorkspace').customerId]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('logAnalyticsWorkspace', '2025-02-01', 'full').location]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[tryGet(tryGet(reference('logAnalyticsWorkspace', '2025-02-01', 'full'), 'identity'), 'principalId')]"
                            },
                            "primarySharedKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The primary shared key of the log analytics workspace."
                              },
                              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').primarySharedKey]"
                            },
                            "secondarySharedKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The secondary shared key of the log analytics workspace."
                              },
                              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').secondarySharedKey]"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "monitoringRG"
              ]
            }
          }
        }
      }
    },
    "resourceGroupBackoffice": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resourceGroupBackoffice-{0}', uniqueString('resourceGroupBackoffice', deployment().name))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8600100714624075468"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            }
          },
          "resources": {
            "backofficeRG": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2025-04-01",
              "name": "rg-dev-backoffice",
              "location": "[parameters('location')]"
            },
            "serviceBus": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('serviceBus-{0}', uniqueString('serviceBus', deployment().name))]",
              "resourceGroup": "rg-dev-backoffice",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14894971221398556052"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "servicebusName": "sb-dev-marad",
                    "servicebusTopicName": "[format('{0}/topic1', variables('servicebusName'))]",
                    "servicebusSubscriptionName": "[format('{0}/sub1', variables('servicebusTopicName'))]"
                  },
                  "resources": {
                    "serviceBusTopic": {
                      "type": "Microsoft.ServiceBus/namespaces/topics",
                      "apiVersion": "2024-01-01",
                      "name": "[variables('servicebusTopicName')]",
                      "properties": {
                        "autoDeleteOnIdle": "P1D",
                        "defaultMessageTimeToLive": "P1D",
                        "duplicateDetectionHistoryTimeWindow": "PT10M",
                        "enableBatchedOperations": true,
                        "enableExpress": false,
                        "enablePartitioning": false,
                        "maxMessageSizeInKilobytes": 256,
                        "maxSizeInMegabytes": 1024,
                        "supportOrdering": false
                      },
                      "dependsOn": [
                        "servicebus"
                      ]
                    },
                    "serviceBusSubscription": {
                      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                      "apiVersion": "2024-01-01",
                      "name": "[variables('servicebusSubscriptionName')]",
                      "properties": {
                        "maxDeliveryCount": 1,
                        "lockDuration": "PT5M",
                        "autoDeleteOnIdle": "P1D",
                        "deadLetteringOnMessageExpiration": false,
                        "defaultMessageTimeToLive": "P1D",
                        "enableBatchedOperations": true,
                        "isClientAffine": false
                      },
                      "dependsOn": [
                        "serviceBusTopic"
                      ]
                    },
                    "servicebus": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "serviceBusNamespaceDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('servicebusName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "skuObject": {
                            "value": {
                              "name": "Standard"
                            }
                          },
                          "zoneRedundant": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "6395908488776864263"
                            },
                            "name": "Service Bus Namespaces",
                            "description": "This module deploys a Service Bus Namespace."
                          },
                          "definitions": {
                            "privateEndpointOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the private endpoint."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the private endpoint."
                                  }
                                },
                                "groupId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The group Id for the private endpoint Group."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "fqdn": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "FQDN that resolves to private endpoint IP address."
                                        }
                                      },
                                      "ipAddresses": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "A list of private IP addresses of the private endpoint."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "The custom DNS configurations of the private endpoint."
                                  }
                                },
                                "networkInterfaceResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "The IDs of the network interfaces associated with the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "skuType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Basic",
                                    "Premium",
                                    "Standard"
                                  ],
                                  "metadata": {
                                    "description": "Required. Name of this SKU. - Basic, Standard, Premium."
                                  }
                                },
                                "capacity": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The specified messaging units for the tier. Only used for Premium Sku tier."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a SKU."
                              }
                            },
                            "authorizationRuleType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the authorization rule."
                                  }
                                },
                                "rights": {
                                  "type": "array",
                                  "allowedValues": [
                                    "Listen",
                                    "Manage",
                                    "Send"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The rights associated with the rule."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for an authorization rule."
                              }
                            },
                            "disasterRecoveryConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the disaster recovery config."
                                  }
                                },
                                "alternateName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Primary/Secondary eventhub namespace name, which is part of GEO DR pairing."
                                  }
                                },
                                "partnerNamespace": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the Primary/Secondary event hub namespace name, which is part of GEO DR pairing."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a disaster recovery configuration."
                              }
                            },
                            "migrationConfigurationType": {
                              "type": "object",
                              "properties": {
                                "postMigrationName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name to access Standard Namespace after migration."
                                  }
                                },
                                "targetNamespace": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Existing premium Namespace resource ID which has no entities, will be used for migration."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a migration configuration"
                              }
                            },
                            "networkRuleSetType": {
                              "type": "object",
                              "properties": {
                                "publicNetworkAccess": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. This determines if traffic is allowed over public network. Default is \"Enabled\". If set to \"Disabled\", traffic to this namespace will be restricted over Private Endpoints only and network rules will not be applied."
                                  }
                                },
                                "defaultAction": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Allow",
                                    "Deny"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Default Action for Network Rule Set. Default is \"Allow\". It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, it will be set to \"Deny\" if ipRules or virtualNetworkRules are being used."
                                  }
                                },
                                "trustedServiceAccessEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether Trusted Service Access is enabled or not. Default is \"true\". It will not be set if publicNetworkAccess is \"Disabled\"."
                                  }
                                },
                                "ipRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Allow",
                                          "Deny"
                                        ],
                                        "metadata": {
                                          "description": "Required. The IP filter action."
                                        }
                                      },
                                      "ipMask": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The IP mask."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of IpRules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                                  }
                                },
                                "virtualNetworkRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ignoreMissingVnetServiceEndpoint": {
                                        "type": "bool",
                                        "metadata": {
                                          "description": "Required. The virtual network rule name."
                                        }
                                      },
                                      "subnetResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of the subnet."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List virtual network rules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a network rule set."
                              }
                            },
                            "queueType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the queue."
                                  }
                                },
                                "autoDeleteOnIdle": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes (PT5M)."
                                  }
                                },
                                "forwardDeadLetteredMessagesTo": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Queue/Topic name to forward the Dead Letter message."
                                  }
                                },
                                "forwardTo": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Queue/Topic name to forward the messages."
                                  }
                                },
                                "maxMessageSizeInKilobytes": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum size (in KB) of the message payload that can be accepted by the queue. This property is only used in Premium today and default is 1024."
                                  }
                                },
                                "authorizationRules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/authorizationRuleType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Authorization Rules for the Service Bus Queue."
                                  }
                                },
                                "deadLetteringOnMessageExpiration": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether this queue has dead letter support when a message expires."
                                  }
                                },
                                "defaultMessageTimeToLive": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                  }
                                },
                                "duplicateDetectionHistoryTimeWindow": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                  }
                                },
                                "enableBatchedOperations": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether server-side batched operations are enabled."
                                  }
                                },
                                "enableExpress": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage. This property is only used if the `service-bus/namespace` sku is Premium."
                                  }
                                },
                                "enablePartitioning": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether the queue is to be partitioned across multiple message brokers."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lock settings of the service."
                                  }
                                },
                                "lockDuration": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute."
                                  }
                                },
                                "maxDeliveryCount": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10."
                                  }
                                },
                                "maxSizeInMegabytes": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024."
                                  }
                                },
                                "requiresDuplicateDetection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value indicating if this queue requires duplicate detection."
                                  }
                                },
                                "requiresSession": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether the queue supports the concept of sessions."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Active",
                                    "Creating",
                                    "Deleting",
                                    "Disabled",
                                    "ReceiveDisabled",
                                    "Renaming",
                                    "Restoring",
                                    "SendDisabled",
                                    "Unknown"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enumerates the possible values for the status of a messaging entity. - Active, Disabled, Restoring, SendDisabled, ReceiveDisabled, Creating, Deleting, Renaming, Unknown."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a queue."
                              }
                            },
                            "topicType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the topic."
                                  }
                                },
                                "authorizationRules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/authorizationRuleType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Authorization Rules for the Service Bus Topic."
                                  }
                                },
                                "autoDeleteOnIdle": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes."
                                  }
                                },
                                "defaultMessageTimeToLive": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                  }
                                },
                                "duplicateDetectionHistoryTimeWindow": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                  }
                                },
                                "enableBatchedOperations": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether server-side batched operations are enabled."
                                  }
                                },
                                "enableExpress": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage. This property is only used if the `service-bus/namespace` sku is Premium."
                                  }
                                },
                                "enablePartitioning": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether the topic is to be partitioned across multiple message brokers."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lock settings of the service."
                                  }
                                },
                                "maxMessageSizeInKilobytes": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum size (in KB) of the message payload that can be accepted by the topic. This property is only used in Premium today and default is 1024."
                                  }
                                },
                                "maxSizeInMegabytes": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The maximum size of the topic in megabytes, which is the size of memory allocated for the topic. Default is 1024."
                                  }
                                },
                                "requiresDuplicateDetection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value indicating if this topic requires duplicate detection."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Active",
                                    "Creating",
                                    "Deleting",
                                    "Disabled",
                                    "ReceiveDisabled",
                                    "Renaming",
                                    "Restoring",
                                    "SendDisabled",
                                    "Unknown"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enumerates the possible values for the status of a messaging entity. - Active, Disabled, Restoring, SendDisabled, ReceiveDisabled, Creating, Deleting, Renaming, Unknown."
                                  }
                                },
                                "supportOrdering": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether the topic supports ordering."
                                  }
                                },
                                "subscriptions": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/subscriptionType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subscriptions of the topic."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a topic."
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_2.actionType": {
                              "type": "object",
                              "properties": {
                                "compatibilityLevel": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                  }
                                },
                                "requiresPreprocessing": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                  }
                                },
                                "sqlExpression": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. SQL expression. e.g. MyProperty='ABC'."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "A type for the filter actions of a Service Bus Namespace Topic Subscription Rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/subscription/rule/main.bicep"
                                }
                              }
                            },
                            "_2.correlationFilterType": {
                              "type": "object",
                              "properties": {
                                "contentType": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Content type of the message."
                                  }
                                },
                                "correlationId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Identifier of the correlation."
                                  }
                                },
                                "label": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application specific label."
                                  }
                                },
                                "messageId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Identifier of the message."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Dictionary object for custom filters."
                                  }
                                },
                                "replyTo": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Address of the queue to reply to."
                                  }
                                },
                                "replyToSessionId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Session identifier to reply to."
                                  }
                                },
                                "requiresPreprocessing": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                  }
                                },
                                "sessionId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Session identifier."
                                  }
                                },
                                "to": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Address to send to."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "A type for the properties of a correlation filter of a Service Bus Namespace Topic Subscription Rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/subscription/rule/main.bicep"
                                }
                              }
                            },
                            "_2.filterTypeType": {
                              "type": "string",
                              "allowedValues": [
                                "CorrelationFilter",
                                "SqlFilter"
                              ],
                              "metadata": {
                                "description": "A type for the type of a Service Bus Namespace Topic Subscription Rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/subscription/rule/main.bicep"
                                }
                              }
                            },
                            "_2.ruleType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the Service Bus Namespace Topic Subscription Rule."
                                  }
                                },
                                "action": {
                                  "$ref": "#/definitions/_2.actionType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression."
                                  }
                                },
                                "correlationFilter": {
                                  "$ref": "#/definitions/_2.correlationFilterType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Properties of correlationFilter."
                                  }
                                },
                                "filterType": {
                                  "$ref": "#/definitions/_2.filterTypeType",
                                  "metadata": {
                                    "description": "Required. Filter type that is evaluated against a BrokeredMessage."
                                  }
                                },
                                "sqlFilter": {
                                  "$ref": "#/definitions/_2.sqlFilterType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Properties of sqlFilter."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "A type for a Service Bus Namespace Topic Subscription Rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/subscription/rule/main.bicep"
                                }
                              }
                            },
                            "_2.sqlFilterType": {
                              "type": "object",
                              "properties": {
                                "compatibilityLevel": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                  }
                                },
                                "requiresPreprocessing": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                  }
                                },
                                "sqlExpression": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The SQL expression. e.g. MyProperty='ABC'."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "A type for the properties of a SQL filter of a Service Bus Namespace Topic Subscription Rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/subscription/rule/main.bicep"
                                }
                              }
                            },
                            "customerManagedKeyWithAutoRotateType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                                  }
                                },
                                "autoRotationEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateEndpointSingleServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private Endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the Private Endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "resourceGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "subscriptionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the service bus namespace topic subscription."
                                  }
                                },
                                "autoDeleteOnIdle": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timespan idle interval after which the syubscription is automatically deleted. The minimum duration is 5 minutes."
                                  }
                                },
                                "clientAffineProperties": {
                                  "type": "object",
                                  "properties": {
                                    "clientId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Indicates the Client ID of the application that created the client-affine subscription."
                                      }
                                    },
                                    "isDurable": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is durable or not."
                                      }
                                    },
                                    "isShared": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is shared or not."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The properties that are associated with a subscription that is client-affine."
                                  }
                                },
                                "deadLetteringOnMessageExpiration": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether a subscription has dead letter support when a message expires."
                                  }
                                },
                                "deadLetteringOnFilterEvaluationExceptions": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether a subscription has dead letter support on filter evaluation exceptions."
                                  }
                                },
                                "defaultMessageTimeToLive": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                  }
                                },
                                "duplicateDetectionHistoryTimeWindow": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timespan that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                  }
                                },
                                "enableBatchedOperations": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether server-side batched operations are enabled."
                                  }
                                },
                                "forwardDeadLetteredMessagesTo": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Queue/Topic name to forward the Dead Letter messages to."
                                  }
                                },
                                "forwardTo": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Queue/Topic name to forward the messages to."
                                  }
                                },
                                "isClientAffine": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether the subscription has an affinity to the client id."
                                  }
                                },
                                "lockDuration": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute."
                                  }
                                },
                                "maxDeliveryCount": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Number of maximum deliveries. A message is automatically deadlettered after this number of deliveries. Default value is 10."
                                  }
                                },
                                "requiresSession": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A value that indicates whether the subscription supports the concept of sessions."
                                  }
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_2.ruleType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subscription rules."
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Active",
                                    "Creating",
                                    "Deleting",
                                    "Disabled",
                                    "ReceiveDisabled",
                                    "Renaming",
                                    "Restoring",
                                    "SendDisabled",
                                    "Unknown"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enumerates the possible values for the status of a messaging entity."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type for a subscription.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "topic/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 260,
                              "metadata": {
                                "description": "Required. Name of the Service Bus Namespace."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "skuObject": {
                              "$ref": "#/definitions/skuType",
                              "defaultValue": {
                                "name": "Premium",
                                "capacity": 2
                              },
                              "metadata": {
                                "description": "Optional. The SKU of the Service Bus Namespace. Defaulted to Premium for ZoneRedundant configurations by default."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enabled by default in order to align with resiliency best practices, thus requires Premium SKU."
                              }
                            },
                            "minimumTlsVersion": {
                              "type": "string",
                              "defaultValue": "1.2",
                              "allowedValues": [
                                "1.0",
                                "1.1",
                                "1.2"
                              ],
                              "metadata": {
                                "description": "Optional. The minimum TLS version for the cluster to support."
                              }
                            },
                            "alternateName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Alternate name for namespace."
                              }
                            },
                            "premiumMessagingPartitions": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of partitions of a Service Bus namespace. This property is only applicable to Premium SKU namespaces. The default value is 1 and possible values are 1, 2 and 4."
                              }
                            },
                            "authorizationRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/authorizationRuleType"
                              },
                              "defaultValue": [
                                {
                                  "name": "RootManageSharedAccessKey",
                                  "rights": [
                                    "Listen",
                                    "Manage",
                                    "Send"
                                  ]
                                }
                              ],
                              "metadata": {
                                "description": "Optional. Authorization Rules for the Service Bus namespace."
                              }
                            },
                            "migrationConfiguration": {
                              "$ref": "#/definitions/migrationConfigurationType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The migration configuration."
                              }
                            },
                            "disasterRecoveryConfig": {
                              "$ref": "#/definitions/disasterRecoveryConfigType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The disaster recovery configuration."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                "SecuredByPerimeter"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointSingleServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "networkRuleSets": {
                              "$ref": "#/definitions/networkRuleSetType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configure networking options for Premium SKU Service Bus. This object contains IPs/Subnets to allow or restrict access to private endpoints only. For security reasons, it is recommended to configure this object on the Namespace."
                              }
                            },
                            "disableLocalAuth": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property disables SAS authentication for the Service Bus namespace."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.ServiceBus/namespaces@2024-01-01#properties/tags"
                                },
                                "description": "Optional. Tags of the resource."
                              },
                              "nullable": true
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/queueType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The queues to create in the service bus namespace."
                              }
                            },
                            "topics": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/topicType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The topics to create in the service bus namespace."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "requireInfrastructureEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable infrastructure encryption (double encryption). Note, this setting requires the configuration of Customer-Managed-Keys (CMK) via the corresponding module parameters."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                              "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                              "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.servicebus-namespace.{0}.{1}', replace('0.15.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                            },
                            "serviceBusNamespace": {
                              "type": "Microsoft.ServiceBus/namespaces",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuObject').name]",
                                "capacity": "[tryGet(parameters('skuObject'), 'capacity')]"
                              },
                              "identity": "[variables('identity')]",
                              "properties": {
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSets'))), 'Disabled', 'Enabled'))]",
                                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                                "alternateName": "[parameters('alternateName')]",
                                "zoneRedundant": "[parameters('zoneRedundant')]",
                                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                                "premiumMessagingPartitions": "[if(equals(parameters('skuObject').name, 'Premium'), parameters('premiumMessagingPartitions'), 0)]",
                                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createArray(createObject('identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), createObject('userAssignedIdentity', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')))), null()), 'keyName', parameters('customerManagedKey').keyName, 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyVersion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))))), 'requireInfrastructureEncryption', parameters('requireInfrastructureEncryption')), null())]"
                              },
                              "dependsOn": [
                                "cMKKeyVault",
                                "cMKKeyVault::cMKKey"
                              ]
                            },
                            "serviceBusNamespace_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_diagnosticSettings": {
                              "copy": {
                                "name": "serviceBusNamespace_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_roleAssignments": {
                              "copy": {
                                "name": "serviceBusNamespace_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_authorizationRules": {
                              "copy": {
                                "name": "serviceBusNamespace_authorizationRules",
                                "count": "[length(parameters('authorizationRules'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-AuthorizationRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('authorizationRules')[copyIndex()].name]"
                                  },
                                  "rights": {
                                    "value": "[tryGet(parameters('authorizationRules')[copyIndex()], 'rights')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "11323070987259402251"
                                    },
                                    "name": "Service Bus Namespace Authorization Rules",
                                    "description": "This module deploys a Service Bus Namespace Authorization Rule."
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Queue. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the authorization rule."
                                      }
                                    },
                                    "rights": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "allowedValues": [
                                        "Listen",
                                        "Manage",
                                        "Send"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The rights associated with the rule."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "properties": {
                                        "rights": "[parameters('rights')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the authorization rule."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the authorization rule."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', parameters('namespaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the authorization rule was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_disasterRecoveryConfig": {
                              "condition": "[not(empty(parameters('disasterRecoveryConfig')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-DisasterRecoveryConfig', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(parameters('disasterRecoveryConfig'), 'name'), 'default')]"
                                  },
                                  "alternateName": {
                                    "value": "[tryGet(parameters('disasterRecoveryConfig'), 'alternateName')]"
                                  },
                                  "partnerNamespaceResourceID": {
                                    "value": "[tryGet(parameters('disasterRecoveryConfig'), 'partnerNamespace')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "1678241309605832019"
                                    },
                                    "name": "Service Bus Namespace Disaster Recovery Configs",
                                    "description": "This module deploys a Service Bus Namespace Disaster Recovery Config"
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Queue. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the disaster recovery config."
                                      }
                                    },
                                    "alternateName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Primary/Secondary eventhub namespace name, which is part of GEO DR pairing."
                                      }
                                    },
                                    "partnerNamespaceResourceID": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the Primary/Secondary event hub namespace name, which is part of GEO DR pairing."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "properties": {
                                        "alternateName": "[parameters('alternateName')]",
                                        "partnerNamespace": "[parameters('partnerNamespaceResourceID')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the disaster recovery config."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Resource ID of the disaster recovery config."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs', parameters('namespaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the disaster recovery config was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_migrationConfiguration": {
                              "condition": "[not(empty(coalesce(parameters('migrationConfiguration'), createObject())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-MigrationConfigurations', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "postMigrationName": {
                                    "value": "[parameters('migrationConfiguration').postMigrationName]"
                                  },
                                  "targetNamespaceResourceId": {
                                    "value": "[parameters('migrationConfiguration').targetNamespace]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "16710515412351349319"
                                    },
                                    "name": "Service Bus Namespace Migration Configuration",
                                    "description": "This module deploys a Service Bus Namespace Migration Configuration."
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Queue. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "postMigrationName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name to access Standard Namespace after migration."
                                      }
                                    },
                                    "targetNamespaceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Existing premium Namespace resource ID which has no entities, will be used for migration."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ServiceBus/namespaces/migrationConfigurations",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), '$default')]",
                                      "properties": {
                                        "targetNamespace": "[parameters('targetNamespaceResourceId')]",
                                        "postMigrationName": "[parameters('postMigrationName')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the migration configuration."
                                      },
                                      "value": "$default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Resource ID of the migration configuration."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/migrationConfigurations', parameters('namespaceName'), '$default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the migration configuration was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_networkRuleSet": {
                              "condition": "[or(not(empty(parameters('networkRuleSets'))), not(empty(parameters('privateEndpoints'))))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-NetworkRuleSet', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "publicNetworkAccess": {
                                    "value": "[coalesce(tryGet(parameters('networkRuleSets'), 'publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSets'))), 'Disabled', 'Enabled'))]"
                                  },
                                  "defaultAction": {
                                    "value": "[coalesce(tryGet(parameters('networkRuleSets'), 'defaultAction'), 'Allow')]"
                                  },
                                  "trustedServiceAccessEnabled": {
                                    "value": "[coalesce(tryGet(parameters('networkRuleSets'), 'trustedServiceAccessEnabled'), true())]"
                                  },
                                  "ipRules": {
                                    "value": "[coalesce(tryGet(parameters('networkRuleSets'), 'ipRules'), createArray())]"
                                  },
                                  "virtualNetworkRules": {
                                    "value": "[coalesce(tryGet(parameters('networkRuleSets'), 'virtualNetworkRules'), createArray())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "1486794091593647829"
                                    },
                                    "name": "Service Bus Namespace Network Rule Sets",
                                    "description": "This module deploys a ServiceBus Namespace Network Rule Set."
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Network Rule Set. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. This determines if traffic is allowed over public network. Default is \"Enabled\". If set to \"Disabled\", traffic to this namespace will be restricted over Private Endpoints only and network rules will not be applied."
                                      }
                                    },
                                    "defaultAction": {
                                      "type": "string",
                                      "defaultValue": "Allow",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Default Action for Network Rule Set. Default is \"Allow\". It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, it will be set to \"Deny\" if ipRules or virtualNetworkRules are being used."
                                      }
                                    },
                                    "trustedServiceAccessEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Value that indicates whether Trusted Service Access is enabled or not. Default is \"true\". It will not be set if publicNetworkAccess is \"Disabled\"."
                                      }
                                    },
                                    "virtualNetworkRules": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List virtual network rules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                                      }
                                    },
                                    "ipRules": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of IpRules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "networkRules",
                                        "count": "[length(parameters('virtualNetworkRules'))]",
                                        "input": {
                                          "ignoreMissingVnetServiceEndpoint": "[tryGet(parameters('virtualNetworkRules')[copyIndex('networkRules')], 'ignoreMissingVnetServiceEndpoint')]",
                                          "subnet": "[if(contains(parameters('virtualNetworkRules')[copyIndex('networkRules')], 'subnetResourceId'), createObject('id', parameters('virtualNetworkRules')[copyIndex('networkRules')].subnetResourceId), null())]"
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ServiceBus/namespaces/networkRuleSets",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), 'default')]",
                                      "properties": {
                                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                        "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), if(or(not(empty(parameters('ipRules'))), not(empty(parameters('virtualNetworkRules')))), 'Deny', parameters('defaultAction')), null())]",
                                        "trustedServiceAccessEnabled": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), parameters('trustedServiceAccessEnabled'), null())]",
                                        "ipRules": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), parameters('ipRules'), null())]",
                                        "virtualNetworkRules": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), variables('networkRules'), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the network rule set."
                                      },
                                      "value": "default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the network rule set."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/networkRuleSets', parameters('namespaceName'), 'default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the network rule set was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_queues": {
                              "copy": {
                                "name": "serviceBusNamespace_queues",
                                "count": "[length(coalesce(parameters('queues'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Queue-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                  },
                                  "autoDeleteOnIdle": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'autoDeleteOnIdle')]"
                                  },
                                  "forwardDeadLetteredMessagesTo": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'forwardDeadLetteredMessagesTo')]"
                                  },
                                  "forwardTo": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'forwardTo')]"
                                  },
                                  "maxMessageSizeInKilobytes": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'maxMessageSizeInKilobytes')]"
                                  },
                                  "authorizationRules": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'authorizationRules')]"
                                  },
                                  "deadLetteringOnMessageExpiration": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'deadLetteringOnMessageExpiration')]"
                                  },
                                  "defaultMessageTimeToLive": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'defaultMessageTimeToLive')]"
                                  },
                                  "duplicateDetectionHistoryTimeWindow": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'duplicateDetectionHistoryTimeWindow')]"
                                  },
                                  "enableBatchedOperations": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'enableBatchedOperations')]"
                                  },
                                  "enableExpress": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'enableExpress')]"
                                  },
                                  "enablePartitioning": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'enablePartitioning')]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "lockDuration": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'lockDuration')]"
                                  },
                                  "maxDeliveryCount": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'maxDeliveryCount')]"
                                  },
                                  "maxSizeInMegabytes": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'maxSizeInMegabytes')]"
                                  },
                                  "requiresDuplicateDetection": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'requiresDuplicateDetection')]"
                                  },
                                  "requiresSession": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'requiresSession')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "status": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'status')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "6091742950975504352"
                                    },
                                    "name": "Service Bus Namespace Queue",
                                    "description": "This module deploys a Service Bus Namespace Queue."
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Queue. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Required. Name of the Service Bus Queue."
                                      }
                                    },
                                    "autoDeleteOnIdle": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes (PT5M)."
                                      }
                                    },
                                    "forwardDeadLetteredMessagesTo": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Queue/Topic name to forward the Dead Letter message."
                                      }
                                    },
                                    "forwardTo": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Queue/Topic name to forward the messages."
                                      }
                                    },
                                    "lockDuration": {
                                      "type": "string",
                                      "defaultValue": "PT1M",
                                      "metadata": {
                                        "description": "Optional. ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute."
                                      }
                                    },
                                    "maxSizeInMegabytes": {
                                      "type": "int",
                                      "defaultValue": 1024,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024."
                                      }
                                    },
                                    "requiresDuplicateDetection": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value indicating if this queue requires duplicate detection."
                                      }
                                    },
                                    "requiresSession": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether the queue supports the concept of sessions."
                                      }
                                    },
                                    "defaultMessageTimeToLive": {
                                      "type": "string",
                                      "defaultValue": "P14D",
                                      "metadata": {
                                        "description": "Optional. ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                      }
                                    },
                                    "deadLetteringOnMessageExpiration": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether this queue has dead letter support when a message expires."
                                      }
                                    },
                                    "enableBatchedOperations": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Value that indicates whether server-side batched operations are enabled."
                                      }
                                    },
                                    "duplicateDetectionHistoryTimeWindow": {
                                      "type": "string",
                                      "defaultValue": "PT10M",
                                      "metadata": {
                                        "description": "Optional. ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                      }
                                    },
                                    "maxDeliveryCount": {
                                      "type": "int",
                                      "defaultValue": 10,
                                      "metadata": {
                                        "description": "Optional. The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10."
                                      }
                                    },
                                    "maxMessageSizeInKilobytes": {
                                      "type": "int",
                                      "defaultValue": 1024,
                                      "metadata": {
                                        "description": "Optional. Maximum size (in KB) of the message payload that can be accepted by the queue. This property is only used in Premium today and default is 1024."
                                      }
                                    },
                                    "status": {
                                      "type": "string",
                                      "defaultValue": "Active",
                                      "allowedValues": [
                                        "Active",
                                        "Disabled",
                                        "Restoring",
                                        "SendDisabled",
                                        "ReceiveDisabled",
                                        "Creating",
                                        "Deleting",
                                        "Renaming",
                                        "Unknown"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enumerates the possible values for the status of a messaging entity. - Active, Disabled, Restoring, SendDisabled, ReceiveDisabled, Creating, Deleting, Renaming, Unknown."
                                      }
                                    },
                                    "enablePartitioning": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether the queue is to be partitioned across multiple message brokers."
                                      }
                                    },
                                    "enableExpress": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage. This property is only used if the `service-bus/namespace` sku is Premium."
                                      }
                                    },
                                    "authorizationRules": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Authorization Rules for the Service Bus Queue."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "namespace": {
                                      "existing": true,
                                      "type": "Microsoft.ServiceBus/namespaces",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[parameters('namespaceName')]"
                                    },
                                    "queue": {
                                      "type": "Microsoft.ServiceBus/namespaces/queues",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "properties": {
                                        "autoDeleteOnIdle": "[if(not(empty(parameters('autoDeleteOnIdle'))), parameters('autoDeleteOnIdle'), null())]",
                                        "defaultMessageTimeToLive": "[parameters('defaultMessageTimeToLive')]",
                                        "deadLetteringOnMessageExpiration": "[parameters('deadLetteringOnMessageExpiration')]",
                                        "duplicateDetectionHistoryTimeWindow": "[parameters('duplicateDetectionHistoryTimeWindow')]",
                                        "enableBatchedOperations": "[parameters('enableBatchedOperations')]",
                                        "enableExpress": "[parameters('enableExpress')]",
                                        "enablePartitioning": "[parameters('enablePartitioning')]",
                                        "forwardDeadLetteredMessagesTo": "[if(not(empty(parameters('forwardDeadLetteredMessagesTo'))), parameters('forwardDeadLetteredMessagesTo'), null())]",
                                        "forwardTo": "[if(not(empty(parameters('forwardTo'))), parameters('forwardTo'), null())]",
                                        "lockDuration": "[parameters('lockDuration')]",
                                        "maxDeliveryCount": "[parameters('maxDeliveryCount')]",
                                        "maxMessageSizeInKilobytes": "[if(equals(reference('namespace', '2022-10-01-preview', 'full').sku.name, 'Premium'), parameters('maxMessageSizeInKilobytes'), null())]",
                                        "maxSizeInMegabytes": "[parameters('maxSizeInMegabytes')]",
                                        "requiresDuplicateDetection": "[parameters('requiresDuplicateDetection')]",
                                        "requiresSession": "[parameters('requiresSession')]",
                                        "status": "[parameters('status')]"
                                      },
                                      "dependsOn": [
                                        "namespace"
                                      ]
                                    },
                                    "queue_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/queues/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    },
                                    "queue_roleAssignments": {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/queues/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    },
                                    "queue_authorizationRules": {
                                      "copy": {
                                        "name": "queue_authorizationRules",
                                        "count": "[length(parameters('authorizationRules'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-AuthRule-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "namespaceName": {
                                            "value": "[parameters('namespaceName')]"
                                          },
                                          "queueName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('authorizationRules')[copyIndex()].name]"
                                          },
                                          "rights": {
                                            "value": "[coalesce(tryGet(parameters('authorizationRules')[copyIndex()], 'rights'), createArray())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "15590788022834413497"
                                            },
                                            "name": "Service Bus Namespace Queue Authorization Rules",
                                            "description": "This module deploys a Service Bus Namespace Queue Authorization Rule."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the service bus namepace queue."
                                              }
                                            },
                                            "namespaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "queueName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace Queue. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "rights": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "allowedValues": [
                                                "Listen",
                                                "Manage",
                                                "Send"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The rights associated with the rule."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
                                              "apiVersion": "2022-10-01-preview",
                                              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('queueName'), parameters('name'))]",
                                              "properties": {
                                                "rights": "[parameters('rights')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the authorization rule."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The Resource ID of the authorization rule."
                                              },
                                              "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', parameters('namespaceName'), parameters('queueName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the authorization rule was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_topics": {
                              "copy": {
                                "name": "serviceBusNamespace_topics",
                                "count": "[length(coalesce(parameters('topics'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Topic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "namespaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('topics'), createArray())[copyIndex()].name]"
                                  },
                                  "authorizationRules": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'authorizationRules')]"
                                  },
                                  "autoDeleteOnIdle": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'autoDeleteOnIdle')]"
                                  },
                                  "defaultMessageTimeToLive": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'defaultMessageTimeToLive')]"
                                  },
                                  "duplicateDetectionHistoryTimeWindow": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'duplicateDetectionHistoryTimeWindow')]"
                                  },
                                  "enableBatchedOperations": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'enableBatchedOperations')]"
                                  },
                                  "enableExpress": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'enableExpress')]"
                                  },
                                  "enablePartitioning": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'enablePartitioning')]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "maxMessageSizeInKilobytes": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'maxMessageSizeInKilobytes')]"
                                  },
                                  "requiresDuplicateDetection": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'requiresDuplicateDetection')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "status": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'status')]"
                                  },
                                  "supportOrdering": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'supportOrdering')]"
                                  },
                                  "subscriptions": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'subscriptions')]"
                                  },
                                  "maxSizeInMegabytes": {
                                    "value": "[tryGet(coalesce(parameters('topics'), createArray())[copyIndex()], 'maxSizeInMegabytes')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "12054426509476980309"
                                    },
                                    "name": "Service Bus Namespace Topic",
                                    "description": "This module deploys a Service Bus Namespace Topic."
                                  },
                                  "definitions": {
                                    "subscriptionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the service bus namespace topic subscription."
                                          }
                                        },
                                        "autoDeleteOnIdle": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. ISO 8601 timespan idle interval after which the syubscription is automatically deleted. The minimum duration is 5 minutes."
                                          }
                                        },
                                        "clientAffineProperties": {
                                          "type": "object",
                                          "properties": {
                                            "clientId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Indicates the Client ID of the application that created the client-affine subscription."
                                              }
                                            },
                                            "isDurable": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is durable or not."
                                              }
                                            },
                                            "isShared": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is shared or not."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The properties that are associated with a subscription that is client-affine."
                                          }
                                        },
                                        "deadLetteringOnMessageExpiration": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A value that indicates whether a subscription has dead letter support when a message expires."
                                          }
                                        },
                                        "deadLetteringOnFilterEvaluationExceptions": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A value that indicates whether a subscription has dead letter support on filter evaluation exceptions."
                                          }
                                        },
                                        "defaultMessageTimeToLive": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                          }
                                        },
                                        "duplicateDetectionHistoryTimeWindow": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. ISO 8601 timespan that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                          }
                                        },
                                        "enableBatchedOperations": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A value that indicates whether server-side batched operations are enabled."
                                          }
                                        },
                                        "forwardDeadLetteredMessagesTo": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Queue/Topic name to forward the Dead Letter messages to."
                                          }
                                        },
                                        "forwardTo": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Queue/Topic name to forward the messages to."
                                          }
                                        },
                                        "isClientAffine": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A value that indicates whether the subscription has an affinity to the client id."
                                          }
                                        },
                                        "lockDuration": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute."
                                          }
                                        },
                                        "maxDeliveryCount": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Number of maximum deliveries. A message is automatically deadlettered after this number of deliveries. Default value is 10."
                                          }
                                        },
                                        "requiresSession": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A value that indicates whether the subscription supports the concept of sessions."
                                          }
                                        },
                                        "rules": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/ruleType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The subscription rules."
                                          }
                                        },
                                        "status": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Active",
                                            "Creating",
                                            "Deleting",
                                            "Disabled",
                                            "ReceiveDisabled",
                                            "Renaming",
                                            "Restoring",
                                            "SendDisabled",
                                            "Unknown"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enumerates the possible values for the status of a messaging entity."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a subscription."
                                      }
                                    },
                                    "_1.actionType": {
                                      "type": "object",
                                      "properties": {
                                        "compatibilityLevel": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                          }
                                        },
                                        "requiresPreprocessing": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                          }
                                        },
                                        "sqlExpression": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. SQL expression. e.g. MyProperty='ABC'."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "A type for the filter actions of a Service Bus Namespace Topic Subscription Rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "subscription/rule/main.bicep"
                                        }
                                      }
                                    },
                                    "_1.correlationFilterType": {
                                      "type": "object",
                                      "properties": {
                                        "contentType": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Content type of the message."
                                          }
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Identifier of the correlation."
                                          }
                                        },
                                        "label": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application specific label."
                                          }
                                        },
                                        "messageId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Identifier of the message."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Dictionary object for custom filters."
                                          }
                                        },
                                        "replyTo": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Address of the queue to reply to."
                                          }
                                        },
                                        "replyToSessionId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Session identifier to reply to."
                                          }
                                        },
                                        "requiresPreprocessing": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                          }
                                        },
                                        "sessionId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Session identifier."
                                          }
                                        },
                                        "to": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Address to send to."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "A type for the properties of a correlation filter of a Service Bus Namespace Topic Subscription Rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "subscription/rule/main.bicep"
                                        }
                                      }
                                    },
                                    "_1.filterTypeType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "CorrelationFilter",
                                        "SqlFilter"
                                      ],
                                      "metadata": {
                                        "description": "A type for the type of a Service Bus Namespace Topic Subscription Rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "subscription/rule/main.bicep"
                                        }
                                      }
                                    },
                                    "_1.sqlFilterType": {
                                      "type": "object",
                                      "properties": {
                                        "compatibilityLevel": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                          }
                                        },
                                        "requiresPreprocessing": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                          }
                                        },
                                        "sqlExpression": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The SQL expression. e.g. MyProperty='ABC'."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "A type for the properties of a SQL filter of a Service Bus Namespace Topic Subscription Rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "subscription/rule/main.bicep"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "ruleType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the Service Bus Namespace Topic Subscription Rule."
                                          }
                                        },
                                        "action": {
                                          "$ref": "#/definitions/_1.actionType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression."
                                          }
                                        },
                                        "correlationFilter": {
                                          "$ref": "#/definitions/_1.correlationFilterType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of correlationFilter."
                                          }
                                        },
                                        "filterType": {
                                          "$ref": "#/definitions/_1.filterTypeType",
                                          "metadata": {
                                            "description": "Required. Filter type that is evaluated against a BrokeredMessage."
                                          }
                                        },
                                        "sqlFilter": {
                                          "$ref": "#/definitions/_1.sqlFilterType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of sqlFilter."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "A type for a Service Bus Namespace Topic Subscription Rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "subscription/rule/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "namespaceName": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Service Bus Namespace for the Service Bus Topic. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 260,
                                      "metadata": {
                                        "description": "Required. Name of the Service Bus Topic."
                                      }
                                    },
                                    "maxSizeInMegabytes": {
                                      "type": "int",
                                      "defaultValue": 1024,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the topic in megabytes, which is the size of memory allocated for the topic. Default is 1024."
                                      }
                                    },
                                    "requiresDuplicateDetection": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. A value indicating if this topic requires duplicate detection."
                                      }
                                    },
                                    "defaultMessageTimeToLive": {
                                      "type": "string",
                                      "defaultValue": "P14D",
                                      "metadata": {
                                        "description": "Optional. ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                      }
                                    },
                                    "enableBatchedOperations": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Value that indicates whether server-side batched operations are enabled."
                                      }
                                    },
                                    "duplicateDetectionHistoryTimeWindow": {
                                      "type": "string",
                                      "defaultValue": "PT10M",
                                      "metadata": {
                                        "description": "Optional. ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                      }
                                    },
                                    "maxMessageSizeInKilobytes": {
                                      "type": "int",
                                      "defaultValue": 1024,
                                      "metadata": {
                                        "description": "Optional. Maximum size (in KB) of the message payload that can be accepted by the topic. This property is only used in Premium today and default is 1024. This property is only used if the `service-bus/namespace` sku is Premium."
                                      }
                                    },
                                    "supportOrdering": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Value that indicates whether the topic supports ordering."
                                      }
                                    },
                                    "autoDeleteOnIdle": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes."
                                      }
                                    },
                                    "status": {
                                      "type": "string",
                                      "defaultValue": "Active",
                                      "allowedValues": [
                                        "Active",
                                        "Disabled",
                                        "Restoring",
                                        "SendDisabled",
                                        "ReceiveDisabled",
                                        "Creating",
                                        "Deleting",
                                        "Renaming",
                                        "Unknown"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enumerates the possible values for the status of a messaging entity. - Active, Disabled, Restoring, SendDisabled, ReceiveDisabled, Creating, Deleting, Renaming, Unknown."
                                      }
                                    },
                                    "enablePartitioning": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether the topic is to be partitioned across multiple message brokers."
                                      }
                                    },
                                    "enableExpress": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. A value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage. This property is only used if the `service-bus/namespace` sku is Premium."
                                      }
                                    },
                                    "authorizationRules": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Authorization Rules for the Service Bus Topic."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "subscriptions": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/subscriptionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The subscriptions of the topic."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "namespace": {
                                      "existing": true,
                                      "type": "Microsoft.ServiceBus/namespaces",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[parameters('namespaceName')]"
                                    },
                                    "topic": {
                                      "type": "Microsoft.ServiceBus/namespaces/topics",
                                      "apiVersion": "2022-10-01-preview",
                                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "properties": "[union(createObject('autoDeleteOnIdle', parameters('autoDeleteOnIdle'), 'defaultMessageTimeToLive', parameters('defaultMessageTimeToLive'), 'duplicateDetectionHistoryTimeWindow', parameters('duplicateDetectionHistoryTimeWindow'), 'enableBatchedOperations', parameters('enableBatchedOperations'), 'enablePartitioning', parameters('enablePartitioning'), 'requiresDuplicateDetection', parameters('requiresDuplicateDetection'), 'status', parameters('status'), 'supportOrdering', parameters('supportOrdering'), 'maxSizeInMegabytes', parameters('maxSizeInMegabytes')), if(equals(reference('namespace', '2022-10-01-preview', 'full').sku.name, 'Premium'), createObject('enableExpress', parameters('enableExpress'), 'maxMessageSizeInKilobytes', parameters('maxMessageSizeInKilobytes')), createObject()))]",
                                      "dependsOn": [
                                        "namespace"
                                      ]
                                    },
                                    "topic_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/topics/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "topic"
                                      ]
                                    },
                                    "topic_roleAssignments": {
                                      "copy": {
                                        "name": "topic_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/topics/{1}', parameters('namespaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('namespaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "topic"
                                      ]
                                    },
                                    "topic_authorizationRules": {
                                      "copy": {
                                        "name": "topic_authorizationRules",
                                        "count": "[length(parameters('authorizationRules'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-AuthRule-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "namespaceName": {
                                            "value": "[parameters('namespaceName')]"
                                          },
                                          "topicName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('authorizationRules')[copyIndex()].name]"
                                          },
                                          "rights": {
                                            "value": "[coalesce(tryGet(parameters('authorizationRules')[copyIndex()], 'rights'), createArray())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "555281083108037724"
                                            },
                                            "name": "Service Bus Namespace Topic Authorization Rules",
                                            "description": "This module deploys a Service Bus Namespace Topic Authorization Rule."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the service bus namespace topic."
                                              }
                                            },
                                            "namespaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "topicName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace Topic. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "rights": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "allowedValues": [
                                                "Listen",
                                                "Manage",
                                                "Send"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The rights associated with the rule."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.ServiceBus/namespaces/topics/authorizationRules",
                                              "apiVersion": "2022-10-01-preview",
                                              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('topicName'), parameters('name'))]",
                                              "properties": {
                                                "rights": "[parameters('rights')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the authorization rule."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The Resource ID of the authorization rule."
                                              },
                                              "value": "[resourceId('Microsoft.ServiceBus/namespaces/topics/authorizationRules', parameters('namespaceName'), parameters('topicName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the authorization rule was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "topic"
                                      ]
                                    },
                                    "topic_subscription": {
                                      "copy": {
                                        "name": "topic_subscription",
                                        "count": "[length(coalesce(parameters('subscriptions'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-subscription-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('subscriptions'), createArray())[copyIndex()].name]"
                                          },
                                          "namespaceName": {
                                            "value": "[parameters('namespaceName')]"
                                          },
                                          "topicName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "autoDeleteOnIdle": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'autoDeleteOnIdle')]"
                                          },
                                          "defaultMessageTimeToLive": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'defaultMessageTimeToLive'), 'P14D')]"
                                          },
                                          "duplicateDetectionHistoryTimeWindow": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'duplicateDetectionHistoryTimeWindow')]"
                                          },
                                          "enableBatchedOperations": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'enableBatchedOperations')]"
                                          },
                                          "clientAffineProperties": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'clientAffineProperties')]"
                                          },
                                          "deadLetteringOnFilterEvaluationExceptions": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'deadLetteringOnFilterEvaluationExceptions'), true())]"
                                          },
                                          "deadLetteringOnMessageExpiration": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'deadLetteringOnMessageExpiration')]"
                                          },
                                          "forwardDeadLetteredMessagesTo": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'forwardDeadLetteredMessagesTo')]"
                                          },
                                          "forwardTo": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'forwardTo')]"
                                          },
                                          "isClientAffine": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'isClientAffine')]"
                                          },
                                          "lockDuration": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'lockDuration')]"
                                          },
                                          "maxDeliveryCount": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'maxDeliveryCount')]"
                                          },
                                          "requiresSession": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'requiresSession')]"
                                          },
                                          "rules": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'rules')]"
                                          },
                                          "status": {
                                            "value": "[tryGet(coalesce(parameters('subscriptions'), createArray())[copyIndex()], 'status')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "10194470716819672897"
                                            },
                                            "name": "Service Bus Namespace Topic Subscription",
                                            "description": "This module deploys a Service Bus Namespace Topic Subscription."
                                          },
                                          "definitions": {
                                            "clientAffinePropertiesType": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Indicates the Client ID of the application that created the client-affine subscription."
                                                  }
                                                },
                                                "isDurable": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is durable or not. Defaults to true."
                                                  }
                                                },
                                                "isShared": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. For client-affine subscriptions, this value indicates whether the subscription is shared or not. Defaults to false."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true,
                                                "description": "Properties specific to client affine subscriptions."
                                              }
                                            },
                                            "_1.actionType": {
                                              "type": "object",
                                              "properties": {
                                                "compatibilityLevel": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                                  }
                                                },
                                                "requiresPreprocessing": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                  }
                                                },
                                                "sqlExpression": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. SQL expression. e.g. MyProperty='ABC'."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "A type for the filter actions of a Service Bus Namespace Topic Subscription Rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "rule/main.bicep"
                                                }
                                              }
                                            },
                                            "_1.correlationFilterType": {
                                              "type": "object",
                                              "properties": {
                                                "contentType": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Content type of the message."
                                                  }
                                                },
                                                "correlationId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Identifier of the correlation."
                                                  }
                                                },
                                                "label": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Application specific label."
                                                  }
                                                },
                                                "messageId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Identifier of the message."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Dictionary object for custom filters."
                                                  }
                                                },
                                                "replyTo": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Address of the queue to reply to."
                                                  }
                                                },
                                                "replyToSessionId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Session identifier to reply to."
                                                  }
                                                },
                                                "requiresPreprocessing": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                  }
                                                },
                                                "sessionId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Session identifier."
                                                  }
                                                },
                                                "to": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Address to send to."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "A type for the properties of a correlation filter of a Service Bus Namespace Topic Subscription Rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "rule/main.bicep"
                                                }
                                              }
                                            },
                                            "_1.filterTypeType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "CorrelationFilter",
                                                "SqlFilter"
                                              ],
                                              "metadata": {
                                                "description": "A type for the type of a Service Bus Namespace Topic Subscription Rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "rule/main.bicep"
                                                }
                                              }
                                            },
                                            "_1.sqlFilterType": {
                                              "type": "object",
                                              "properties": {
                                                "compatibilityLevel": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                                  }
                                                },
                                                "requiresPreprocessing": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                  }
                                                },
                                                "sqlExpression": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The SQL expression. e.g. MyProperty='ABC'."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "A type for the properties of a SQL filter of a Service Bus Namespace Topic Subscription Rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "rule/main.bicep"
                                                }
                                              }
                                            },
                                            "ruleType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the Service Bus Namespace Topic Subscription Rule."
                                                  }
                                                },
                                                "action": {
                                                  "$ref": "#/definitions/_1.actionType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression."
                                                  }
                                                },
                                                "correlationFilter": {
                                                  "$ref": "#/definitions/_1.correlationFilterType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of correlationFilter."
                                                  }
                                                },
                                                "filterType": {
                                                  "$ref": "#/definitions/_1.filterTypeType",
                                                  "metadata": {
                                                    "description": "Required. Filter type that is evaluated against a BrokeredMessage."
                                                  }
                                                },
                                                "sqlFilter": {
                                                  "$ref": "#/definitions/_1.sqlFilterType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of sqlFilter."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "A type for a Service Bus Namespace Topic Subscription Rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "rule/main.bicep"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 50,
                                              "metadata": {
                                                "description": "Required. The name of the service bus namespace topic subscription."
                                              }
                                            },
                                            "namespaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "topicName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Service Bus Namespace Topic. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "autoDeleteOnIdle": {
                                              "type": "string",
                                              "defaultValue": "P10675198DT2H48M5.477S",
                                              "metadata": {
                                                "description": "Optional. ISO 8601 timespan idle interval after which the subscription is automatically deleted. The minimum duration is 5 minutes."
                                              }
                                            },
                                            "clientAffineProperties": {
                                              "$ref": "#/definitions/clientAffinePropertiesType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. The properties that are associated with a subscription that is client-affine. Required if 'isClientAffine' is set to true."
                                              }
                                            },
                                            "deadLetteringOnFilterEvaluationExceptions": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. A value that indicates whether a subscription has dead letter support on filter evaluation exceptions."
                                              }
                                            },
                                            "deadLetteringOnMessageExpiration": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. A value that indicates whether a subscription has dead letter support when a message expires."
                                              }
                                            },
                                            "defaultMessageTimeToLive": {
                                              "type": "string",
                                              "defaultValue": "P10675199DT2H48M5.4775807S",
                                              "metadata": {
                                                "description": "Optional. ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
                                              }
                                            },
                                            "duplicateDetectionHistoryTimeWindow": {
                                              "type": "string",
                                              "defaultValue": "PT10M",
                                              "metadata": {
                                                "description": "Optional. ISO 8601 timespan that defines the duration of the duplicate detection history. The default value is 10 minutes."
                                              }
                                            },
                                            "enableBatchedOperations": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. A value that indicates whether server-side batched operations are enabled."
                                              }
                                            },
                                            "forwardDeadLetteredMessagesTo": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Queue/Topic name to forward the Dead Letter messages to."
                                              }
                                            },
                                            "forwardTo": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Queue/Topic name to forward the messages to."
                                              }
                                            },
                                            "isClientAffine": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. A value that indicates whether the subscription has an affinity to the client id."
                                              }
                                            },
                                            "lockDuration": {
                                              "type": "string",
                                              "defaultValue": "PT1M",
                                              "metadata": {
                                                "description": "Optional. ISO 8061 lock duration timespan for the subscription. The default value is 1 minute."
                                              }
                                            },
                                            "maxDeliveryCount": {
                                              "type": "int",
                                              "defaultValue": 10,
                                              "metadata": {
                                                "description": "Optional. Number of maximum deliveries. A message is automatically deadlettered after this number of deliveries. Default value is 10."
                                              }
                                            },
                                            "requiresSession": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. A value that indicates whether the subscription supports the concept of sessions."
                                              }
                                            },
                                            "rules": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/ruleType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The subscription rules."
                                              }
                                            },
                                            "status": {
                                              "type": "string",
                                              "defaultValue": "Active",
                                              "allowedValues": [
                                                "Active",
                                                "Creating",
                                                "Deleting",
                                                "Disabled",
                                                "ReceiveDisabled",
                                                "Renaming",
                                                "Restoring",
                                                "SendDisabled",
                                                "Unknown"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Enumerates the possible values for the status of a messaging entity."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "namespace::topic": {
                                              "existing": true,
                                              "type": "Microsoft.ServiceBus/namespaces/topics",
                                              "apiVersion": "2022-10-01-preview",
                                              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('topicName'))]"
                                            },
                                            "namespace": {
                                              "existing": true,
                                              "type": "Microsoft.ServiceBus/namespaces",
                                              "apiVersion": "2022-10-01-preview",
                                              "name": "[parameters('namespaceName')]"
                                            },
                                            "subscription": {
                                              "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                                              "apiVersion": "2021-11-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('topicName'), parameters('name'))]",
                                              "properties": {
                                                "autoDeleteOnIdle": "[parameters('autoDeleteOnIdle')]",
                                                "clientAffineProperties": "[if(not(empty(parameters('clientAffineProperties'))), createObject('clientId', tryGet(parameters('clientAffineProperties'), 'clientId'), 'isDurable', coalesce(tryGet(parameters('clientAffineProperties'), 'isDurable'), true()), 'isShared', coalesce(tryGet(parameters('clientAffineProperties'), 'isShared'), false())), null())]",
                                                "deadLetteringOnFilterEvaluationExceptions": "[parameters('deadLetteringOnFilterEvaluationExceptions')]",
                                                "deadLetteringOnMessageExpiration": "[parameters('deadLetteringOnMessageExpiration')]",
                                                "defaultMessageTimeToLive": "[parameters('defaultMessageTimeToLive')]",
                                                "duplicateDetectionHistoryTimeWindow": "[parameters('duplicateDetectionHistoryTimeWindow')]",
                                                "enableBatchedOperations": "[parameters('enableBatchedOperations')]",
                                                "forwardDeadLetteredMessagesTo": "[parameters('forwardDeadLetteredMessagesTo')]",
                                                "forwardTo": "[if(not(empty(parameters('forwardTo'))), parameters('forwardTo'), null())]",
                                                "isClientAffine": "[parameters('isClientAffine')]",
                                                "lockDuration": "[parameters('lockDuration')]",
                                                "maxDeliveryCount": "[parameters('maxDeliveryCount')]",
                                                "requiresSession": "[parameters('requiresSession')]",
                                                "status": "[parameters('status')]"
                                              }
                                            },
                                            "subscription_rule": {
                                              "copy": {
                                                "name": "subscription_rule",
                                                "count": "[length(coalesce(parameters('rules'), createArray()))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-rule-{1}', deployment().name, copyIndex())]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].name]"
                                                  },
                                                  "subscriptionName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "namespaceName": {
                                                    "value": "[parameters('namespaceName')]"
                                                  },
                                                  "topicName": {
                                                    "value": "[parameters('topicName')]"
                                                  },
                                                  "action": {
                                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'action')]"
                                                  },
                                                  "correlationFilter": {
                                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'correlationFilter')]"
                                                  },
                                                  "filterType": {
                                                    "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].filterType]"
                                                  },
                                                  "sqlFilter": {
                                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'sqlFilter')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.36.1.42791",
                                                      "templateHash": "18396329421177385677"
                                                    },
                                                    "name": "Service Bus Namespace Topic Subscription Rule",
                                                    "description": "This module deploys a Service Bus Namespace Topic Subscription Rule."
                                                  },
                                                  "definitions": {
                                                    "ruleType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The name of the Service Bus Namespace Topic Subscription Rule."
                                                          }
                                                        },
                                                        "action": {
                                                          "$ref": "#/definitions/actionType",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression."
                                                          }
                                                        },
                                                        "correlationFilter": {
                                                          "$ref": "#/definitions/correlationFilterType",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of correlationFilter."
                                                          }
                                                        },
                                                        "filterType": {
                                                          "$ref": "#/definitions/filterTypeType",
                                                          "metadata": {
                                                            "description": "Required. Filter type that is evaluated against a BrokeredMessage."
                                                          }
                                                        },
                                                        "sqlFilter": {
                                                          "$ref": "#/definitions/sqlFilterType",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of sqlFilter."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "A type for a Service Bus Namespace Topic Subscription Rule."
                                                      }
                                                    },
                                                    "actionType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "compatibilityLevel": {
                                                          "type": "int",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                                          }
                                                        },
                                                        "requiresPreprocessing": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                          }
                                                        },
                                                        "sqlExpression": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. SQL expression. e.g. MyProperty='ABC'."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "A type for the filter actions of a Service Bus Namespace Topic Subscription Rule."
                                                      }
                                                    },
                                                    "correlationFilterType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "contentType": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Content type of the message."
                                                          }
                                                        },
                                                        "correlationId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Identifier of the correlation."
                                                          }
                                                        },
                                                        "label": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Application specific label."
                                                          }
                                                        },
                                                        "messageId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Identifier of the message."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Dictionary object for custom filters."
                                                          }
                                                        },
                                                        "replyTo": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Address of the queue to reply to."
                                                          }
                                                        },
                                                        "replyToSessionId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Session identifier to reply to."
                                                          }
                                                        },
                                                        "requiresPreprocessing": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                          }
                                                        },
                                                        "sessionId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Session identifier."
                                                          }
                                                        },
                                                        "to": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Address to send to."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "A type for the properties of a correlation filter of a Service Bus Namespace Topic Subscription Rule."
                                                      }
                                                    },
                                                    "filterTypeType": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "CorrelationFilter",
                                                        "SqlFilter"
                                                      ],
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "A type for the type of a Service Bus Namespace Topic Subscription Rule."
                                                      }
                                                    },
                                                    "sqlFilterType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "compatibilityLevel": {
                                                          "type": "int",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20."
                                                          }
                                                        },
                                                        "requiresPreprocessing": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Value that indicates whether the rule action requires preprocessing."
                                                          }
                                                        },
                                                        "sqlExpression": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The SQL expression. e.g. MyProperty='ABC'."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "A type for the properties of a SQL filter of a Service Bus Namespace Topic Subscription Rule."
                                                      }
                                                    }
                                                  },
                                                  "parameters": {
                                                    "name": {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "maxLength": 50,
                                                      "metadata": {
                                                        "description": "Required. The name of the service bus namespace topic subscription rule."
                                                      }
                                                    },
                                                    "namespaceName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Service Bus Namespace. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "topicName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Service Bus Namespace Topic. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "subscriptionName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Service Bus Namespace Topic Subscription. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "action": {
                                                      "$ref": "#/definitions/actionType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression."
                                                      }
                                                    },
                                                    "correlationFilter": {
                                                      "$ref": "#/definitions/correlationFilterType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Conditional. Properties of a correlation filter. Required if 'filterType' is set to 'CorrelationFilter'."
                                                      }
                                                    },
                                                    "filterType": {
                                                      "$ref": "#/definitions/filterTypeType",
                                                      "metadata": {
                                                        "description": "Required. Filter type that is evaluated against a BrokeredMessage."
                                                      }
                                                    },
                                                    "sqlFilter": {
                                                      "$ref": "#/definitions/sqlFilterType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Conditional. Properties of a SQL filter. Required if 'filterType' is set to 'SqlFilter'."
                                                      }
                                                    }
                                                  },
                                                  "resources": {
                                                    "namespace::topic::subscription": {
                                                      "existing": true,
                                                      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                                                      "apiVersion": "2021-11-01",
                                                      "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('topicName'), parameters('subscriptionName'))]"
                                                    },
                                                    "namespace::topic": {
                                                      "existing": true,
                                                      "type": "Microsoft.ServiceBus/namespaces/topics",
                                                      "apiVersion": "2022-10-01-preview",
                                                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('topicName'))]"
                                                    },
                                                    "namespace": {
                                                      "existing": true,
                                                      "type": "Microsoft.ServiceBus/namespaces",
                                                      "apiVersion": "2022-10-01-preview",
                                                      "name": "[parameters('namespaceName')]"
                                                    },
                                                    "rule": {
                                                      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions/rules",
                                                      "apiVersion": "2022-10-01-preview",
                                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('namespaceName'), parameters('topicName'), parameters('subscriptionName'), parameters('name'))]",
                                                      "properties": {
                                                        "action": "[parameters('action')]",
                                                        "correlationFilter": "[parameters('correlationFilter')]",
                                                        "filterType": "[parameters('filterType')]",
                                                        "sqlFilter": "[if(not(empty(parameters('sqlFilter'))), createObject('compatibilityLevel', coalesce(tryGet(parameters('sqlFilter'), 'compatibilityLevel'), 20), 'requiresPreprocessing', tryGet(parameters('sqlFilter'), 'requiresPreprocessing'), 'sqlExpression', tryGet(parameters('sqlFilter'), 'sqlExpression')), null())]"
                                                      }
                                                    }
                                                  },
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the rule."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The Resource ID of the rule."
                                                      },
                                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/topics/subscriptions/rules', parameters('namespaceName'), parameters('topicName'), parameters('subscriptionName'), parameters('name'))]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the Resource Group the rule was created in."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "subscription"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the topic subscription."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The Resource ID of the topic subscription."
                                              },
                                              "value": "[resourceId('Microsoft.ServiceBus/namespaces/topics/subscriptions', parameters('namespaceName'), parameters('topicName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the topic subscription was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "topic"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed topic."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed topic."
                                      },
                                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('namespaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed topic."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            },
                            "serviceBusNamespace_privateEndpoints": {
                              "copy": {
                                "name": "serviceBusNamespace_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-serviceBusNamespace-PEP-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'namespace'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'namespace'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'namespace')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'namespace'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'namespace')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "15954548978129725136"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "privateLinkServiceConnectionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the private link service connection."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                              }
                                            },
                                            "privateLinkServiceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of private link service."
                                              }
                                            },
                                            "requestMessage": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private link service connection."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "customDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ipConfigurationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.13.18514",
                                              "templateHash": "5440815542537978381"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "serviceBusNamespace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed service bus namespace."
                              },
                              "value": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed service bus namespace."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed service bus namespace."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[tryGet(tryGet(reference('serviceBusNamespace', '2024-01-01', 'full'), 'identity'), 'principalId')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('serviceBusNamespace', '2024-01-01', 'full').location]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointOutputType"
                              },
                              "metadata": {
                                "description": "The private endpoints of the service bus namespace."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                "input": {
                                  "name": "[reference(format('serviceBusNamespace_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('serviceBusNamespace_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[tryGet(tryGet(reference(format('serviceBusNamespace_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                  "customDnsConfigs": "[reference(format('serviceBusNamespace_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                  "networkInterfaceResourceIds": "[reference(format('serviceBusNamespace_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                }
                              }
                            },
                            "serviceBusEndpoint": {
                              "type": "string",
                              "metadata": {
                                "description": "The endpoint of the deployed service bus namespace."
                              },
                              "value": "[reference('serviceBusNamespace').serviceBusEndpoint]"
                            },
                            "primaryConnectionString": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The primary connection string of the service bus namespace."
                              },
                              "value": "[listkeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))), '2024-01-01').primaryConnectionString]"
                            },
                            "secondaryConnectionString": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The secondary connection string of the service bus namespace."
                              },
                              "value": "[listkeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))), '2024-01-01').secondaryConnectionString]"
                            },
                            "primaryKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The primary key of the service bus namespace."
                              },
                              "value": "[listkeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))), '2024-01-01').primaryKey]"
                            },
                            "secondaryKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The secondary key of the service bus namespace."
                              },
                              "value": "[listkeys(format('{0}/AuthorizationRules/RootManageSharedAccessKey', resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))), '2024-01-01').secondaryKey]"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "backofficeRG"
              ]
            },
            "storageAccount": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storageAccount-{0}', uniqueString('storageAccount', deployment().name))]",
              "resourceGroup": "rg-dev-backoffice",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "2592594240808445950"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": {
                    "fileServices": {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2025-01-01",
                      "name": "sadevmarad/default",
                      "properties": {
                        "shareDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        }
                      }
                    },
                    "fileShare": {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2025-01-01",
                      "name": "sadevmarad/default/fileshare",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": 102400
                      }
                    },
                    "storageAccount": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storageAccountDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobServices": {
                            "value": {}
                          },
                          "name": {
                            "value": "sadevmarad"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "accessTier": {
                            "value": "Cold"
                          },
                          "kind": {
                            "value": "StorageV2"
                          },
                          "skuName": {
                            "value": "Standard_LRS"
                          },
                          "customDomainUseSubDomainName": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "16027397933856085759"
                            },
                            "name": "Storage Accounts",
                            "description": "This module deploys a Storage Account."
                          },
                          "definitions": {
                            "privateEndpointOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the private endpoint."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the private endpoint."
                                  }
                                },
                                "groupId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The group Id for the private endpoint Group."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "fqdn": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "FQDN that resolves to private endpoint IP address."
                                        }
                                      },
                                      "ipAddresses": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "A list of private IP addresses of the private endpoint."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "The custom DNS configurations of the private endpoint."
                                  }
                                },
                                "networkInterfaceResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "The IDs of the network interfaces associated with the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "networkAclsType": {
                              "type": "object",
                              "properties": {
                                "resourceAccessRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "tenantId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of the tenant in which the resource resides in."
                                        }
                                      },
                                      "resourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                                  }
                                },
                                "bypass": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureServices",
                                    "AzureServices, Logging",
                                    "AzureServices, Logging, Metrics",
                                    "AzureServices, Metrics",
                                    "Logging",
                                    "Logging, Metrics",
                                    "Metrics",
                                    "None"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                                  }
                                },
                                "virtualNetworkRules": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the virtual network rules."
                                  }
                                },
                                "ipRules": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the IP ACL rules."
                                  }
                                },
                                "defaultAction": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Allow",
                                    "Deny"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "secretsExportConfigurationType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                                  }
                                },
                                "accessKey1Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The accessKey1 secret name to create."
                                  }
                                },
                                "connectionString1Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The connectionString1 secret name to create."
                                  }
                                },
                                "accessKey2Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The accessKey2 secret name to create."
                                  }
                                },
                                "connectionString2Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The connectionString2 secret name to create."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "localUserType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the local user used for SFTP Authentication."
                                  }
                                },
                                "hasSharedKey": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                                  }
                                },
                                "hasSshKey": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                                  }
                                },
                                "hasSshPassword": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                                  }
                                },
                                "homeDirectory": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The local user home directory."
                                  }
                                },
                                "permissionScopes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/permissionScopeType"
                                  },
                                  "metadata": {
                                    "description": "Required. The permission scopes of the local user."
                                  }
                                },
                                "sshAuthorizedKeys": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/sshAuthorizedKeyType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The local user SSH authorized keys for SFTP."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_1.secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "customerManagedKeyWithAutoRotateType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                                  }
                                },
                                "autoRotationEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "diagnosticSettingMetricsOnlyType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of diagnostic setting."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "notes": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the notes of the lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "permissionScopeType": {
                              "type": "object",
                              "properties": {
                                "permissions": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                  }
                                },
                                "resourceName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service used by the local user, e.g. blob, file."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "local-user/main.bicep"
                                }
                              }
                            },
                            "privateEndpointMultiServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the private endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "resourceGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "secretsOutputType": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "$ref": "#/definitions/_1.secretSetOutputType",
                                "metadata": {
                                  "description": "An exported secret's references."
                                }
                              },
                              "metadata": {
                                "description": "A map of the exported secrets",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "sshAuthorizedKeyType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Description used to store the function/usage of the key."
                                  }
                                },
                                "key": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "local-user/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Storage Account. Must be lower-case."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "StorageV2",
                              "allowedValues": [
                                "Storage",
                                "StorageV2",
                                "BlobStorage",
                                "FileStorage",
                                "BlockBlobStorage"
                              ],
                              "metadata": {
                                "description": "Optional. Type of Storage Account to create."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard_GRS",
                              "allowedValues": [
                                "Standard_LRS",
                                "Standard_ZRS",
                                "Standard_GRS",
                                "Standard_GZRS",
                                "Standard_RAGRS",
                                "Standard_RAGZRS",
                                "StandardV2_LRS",
                                "StandardV2_ZRS",
                                "StandardV2_GRS",
                                "StandardV2_GZRS",
                                "Premium_LRS",
                                "Premium_ZRS",
                                "PremiumV2_LRS",
                                "PremiumV2_ZRS"
                              ],
                              "metadata": {
                                "description": "Optional. Storage Account Sku Name - note: certain V2 SKUs require the use of: kind = FileStorage."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "Hot",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "Cold"
                              ],
                              "metadata": {
                                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
                              }
                            },
                            "largeFileSharesState": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Allow large file shares if set to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
                              }
                            },
                            "azureFilesIdentityBasedAuthentication": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/properties/properties/azureFilesIdentityBasedAuthentication"
                                },
                                "description": "Optional. Provides the identity based authentication settings for Azure Files."
                              },
                              "nullable": true
                            },
                            "defaultToOAuthAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
                              }
                            },
                            "allowSharedKeyAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointMultiServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "managementPolicyRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Storage Account ManagementPolicies Rules."
                              }
                            },
                            "networkAcls": {
                              "$ref": "#/definitions/networkAclsType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
                              }
                            },
                            "requireInfrastructureEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                              }
                            },
                            "allowCrossTenantReplication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Allow or disallow cross AAD tenant object replication."
                              }
                            },
                            "customDomainName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
                              }
                            },
                            "customDomainUseSubDomainName": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
                              }
                            },
                            "dnsEndpointType": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "AzureDnsZone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
                              }
                            },
                            "blobServices": {
                              "type": "object",
                              "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
                              "metadata": {
                                "description": "Optional. Blob service and containers to deploy."
                              }
                            },
                            "fileServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. File service and shares to deploy."
                              }
                            },
                            "queueServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Queue service and queues to create."
                              }
                            },
                            "tableServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Table service and tables to create."
                              }
                            },
                            "allowBlobPublicAccess": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                              }
                            },
                            "minimumTlsVersion": {
                              "type": "string",
                              "defaultValue": "TLS1_2",
                              "allowedValues": [
                                "TLS1_2"
                              ],
                              "metadata": {
                                "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
                              }
                            },
                            "enableHierarchicalNamespace": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
                              }
                            },
                            "enableSftp": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
                              }
                            },
                            "localUsers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/localUserType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Local users to deploy for SFTP authentication."
                              }
                            },
                            "isLocalUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables local users feature, if set to true."
                              }
                            },
                            "enableNfsV3": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/tags"
                                },
                                "description": "Optional. Tags of the resource."
                              },
                              "nullable": true
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "allowedCopyScope": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "AAD",
                                "PrivateLink"
                              ],
                              "metadata": {
                                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "supportsHttpsTrafficOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "sasExpirationPeriod": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
                              }
                            },
                            "sasExpirationAction": {
                              "type": "string",
                              "defaultValue": "Log",
                              "allowedValues": [
                                "Block",
                                "Log"
                              ],
                              "metadata": {
                                "description": "Optional. The SAS expiration action. Allowed values are Block and Log."
                              }
                            },
                            "keyType": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Account",
                                "Service"
                              ],
                              "metadata": {
                                "description": "Optional. The keyType to use with Queue & Table services."
                              }
                            },
                            "secretsExportConfiguration": {
                              "$ref": "#/definitions/secretsExportConfigurationType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
                              "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2024-11-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.26.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2024-11-30",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                            },
                            "storageAccount": {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "properties": "[shallowMerge(createArray(createObject('allowSharedKeyAccess', parameters('allowSharedKeyAccess'), 'defaultToOAuthAuthentication', parameters('defaultToOAuthAuthentication'), 'allowCrossTenantReplication', parameters('allowCrossTenantReplication'), 'allowedCopyScope', parameters('allowedCopyScope'), 'customDomain', createObject('name', parameters('customDomainName'), 'useSubDomainName', parameters('customDomainUseSubDomainName')), 'dnsEndpointType', parameters('dnsEndpointType'), 'isLocalUserEnabled', parameters('isLocalUserEnabled'), 'encryption', union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject())), 'accessTier', if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null()), 'sasPolicy', if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', parameters('sasExpirationAction'), 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null()), 'supportsHttpsTrafficOnly', parameters('supportsHttpsTrafficOnly'), 'isSftpEnabled', parameters('enableSftp'), 'isNfsV3Enabled', if(parameters('enableNfsV3'), parameters('enableNfsV3'), ''), 'largeFileSharesState', if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null()), 'minimumTlsVersion', parameters('minimumTlsVersion'), 'networkAcls', if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny')), 'allowBlobPublicAccess', parameters('allowBlobPublicAccess'), 'publicNetworkAccess', if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))), if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), createObject('azureFilesIdentityBasedAuthentication', parameters('azureFilesIdentityBasedAuthentication')), createObject()), if(not(equals(parameters('enableHierarchicalNamespace'), null())), createObject('isHnsEnabled', parameters('enableHierarchicalNamespace')), createObject())))]",
                              "dependsOn": [
                                "cMKKeyVault",
                                "cMKKeyVault::cMKKey"
                              ]
                            },
                            "storageAccount_diagnosticSettings": {
                              "copy": {
                                "name": "storageAccount_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_roleAssignments": {
                              "copy": {
                                "name": "storageAccount_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_privateEndpoints": {
                              "copy": {
                                "name": "storageAccount_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-sa-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "12389807800450456797"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "privateLinkServiceConnectionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the private link service connection."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                              }
                                            },
                                            "privateLinkServiceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of private link service."
                                              }
                                            },
                                            "requestMessage": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private link service connection."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "customDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ipConfigurationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.34.44.8038",
                                              "templateHash": "13997305779829540948"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2024-05-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2024-05-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_managementPolicies": {
                              "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "rules": {
                                    "value": "[parameters('managementPolicyRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "14529265638306912023"
                                    },
                                    "name": "Storage Account Management Policies",
                                    "description": "This module deploys a Storage Account Management Policy."
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "rules": {
                                      "type": "array",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/managementPolicies@2024-01-01#properties/properties/properties/policy/properties/rules"
                                        },
                                        "description": "Required. The Storage Account ManagementPolicies Rules."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                                      "properties": {
                                        "policy": {
                                          "rules": "[parameters('rules')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed management policy."
                                      },
                                      "value": "default"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed management policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed management policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount",
                                "storageAccount_blobServices"
                              ]
                            },
                            "storageAccount_localUsers": {
                              "copy": {
                                "name": "storageAccount_localUsers",
                                "count": "[length(coalesce(parameters('localUsers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].name]"
                                  },
                                  "hasSshKey": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshKey]"
                                  },
                                  "hasSshPassword": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshPassword]"
                                  },
                                  "permissionScopes": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].permissionScopes]"
                                  },
                                  "hasSharedKey": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'hasSharedKey')]"
                                  },
                                  "homeDirectory": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'homeDirectory')]"
                                  },
                                  "sshAuthorizedKeys": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'sshAuthorizedKeys')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "3261275799710495788"
                                    },
                                    "name": "Storage Account Local Users",
                                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication."
                                  },
                                  "definitions": {
                                    "sshAuthorizedKeyType": {
                                      "type": "object",
                                      "properties": {
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description used to store the function/usage of the key."
                                          }
                                        },
                                        "key": {
                                          "type": "securestring",
                                          "metadata": {
                                            "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "permissionScopeType": {
                                      "type": "object",
                                      "properties": {
                                        "permissions": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                          }
                                        },
                                        "resourceName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                          }
                                        },
                                        "service": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The service used by the local user, e.g. blob, file."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the local user used for SFTP Authentication."
                                      }
                                    },
                                    "hasSharedKey": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                                      }
                                    },
                                    "hasSshKey": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                                      }
                                    },
                                    "hasSshPassword": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                                      }
                                    },
                                    "homeDirectory": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The local user home directory."
                                      }
                                    },
                                    "permissionScopes": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/permissionScopeType"
                                      },
                                      "metadata": {
                                        "description": "Required. The permission scopes of the local user."
                                      }
                                    },
                                    "sshAuthorizedKeys": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/sshAuthorizedKeyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The local user SSH authorized keys for SFTP."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "localUsers": {
                                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "properties": {
                                        "hasSharedKey": "[parameters('hasSharedKey')]",
                                        "hasSshKey": "[parameters('hasSshKey')]",
                                        "hasSshPassword": "[parameters('hasSshPassword')]",
                                        "homeDirectory": "[parameters('homeDirectory')]",
                                        "permissionScopes": "[parameters('permissionScopes')]",
                                        "sshAuthorizedKeys": "[parameters('sshAuthorizedKeys')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed local user."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed local user."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed local user."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_blobServices": {
                              "condition": "[not(empty(parameters('blobServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(parameters('blobServices'), 'containers')]"
                                  },
                                  "automaticSnapshotPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                                  },
                                  "changeFeedEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                                  },
                                  "changeFeedRetentionInDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                                  },
                                  "containerDeleteRetentionPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                                  },
                                  "containerDeleteRetentionPolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                                  },
                                  "containerDeleteRetentionPolicyAllowPermanentDelete": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                                  },
                                  "defaultServiceVersion": {
                                    "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                                  },
                                  "deleteRetentionPolicyAllowPermanentDelete": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                                  },
                                  "deleteRetentionPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                                  },
                                  "deleteRetentionPolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                                  },
                                  "isVersioningEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                                  },
                                  "lastAccessTimeTrackingPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                                  },
                                  "restorePolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                                  },
                                  "restorePolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "1215393307957288546"
                                    },
                                    "name": "Storage Account blob Services",
                                    "description": "This module deploys a Storage Account Blob Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "automaticSnapshotPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                                      }
                                    },
                                    "changeFeedEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                                      }
                                    },
                                    "changeFeedRetentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 1,
                                      "maxValue": 146000,
                                      "metadata": {
                                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 1,
                                      "maxValue": 365,
                                      "metadata": {
                                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "defaultServiceVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                                      }
                                    },
                                    "deleteRetentionPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for blob soft delete."
                                      }
                                    },
                                    "deleteRetentionPolicyDays": {
                                      "type": "int",
                                      "defaultValue": 7,
                                      "minValue": 1,
                                      "maxValue": 365,
                                      "metadata": {
                                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                                      }
                                    },
                                    "deleteRetentionPolicyAllowPermanentDelete": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                                      }
                                    },
                                    "isVersioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                                      }
                                    },
                                    "lastAccessTimeTrackingPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                                      }
                                    },
                                    "restorePolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                                      }
                                    },
                                    "restorePolicyDays": {
                                      "type": "int",
                                      "defaultValue": 7,
                                      "minValue": 1,
                                      "metadata": {
                                        "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Blob containers to create."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "enableReferencedModulesTelemetry": false,
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "blobServices": {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                                        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                                        "containerDeleteRetentionPolicy": {
                                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                                          "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                                        },
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                        "defaultServiceVersion": "[parameters('defaultServiceVersion')]",
                                        "deleteRetentionPolicy": {
                                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                                          "days": "[parameters('deleteRetentionPolicyDays')]",
                                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                                        },
                                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                                        "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                                        "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                                      },
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "blobServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "blobServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "blobServices"
                                      ]
                                    },
                                    "blobServices_container": {
                                      "copy": {
                                        "name": "blobServices_container",
                                        "count": "[length(coalesce(parameters('containers'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServiceName": {
                                            "value": "[variables('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                          },
                                          "defaultEncryptionScope": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                                          },
                                          "denyEncryptionScopeOverride": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                                          },
                                          "enableNfsV3AllSquash": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                                          },
                                          "enableNfsV3RootSquash": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                                          },
                                          "immutableStorageWithVersioningEnabled": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "publicAccess": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "immutabilityPolicyProperties": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.37.4.10188",
                                              "templateHash": "15600440533481093288"
                                            },
                                            "name": "Storage Account Blob Containers",
                                            "description": "This module deploys a Storage Account Blob Container."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "blobServiceName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the parent Blob Service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Storage Container to deploy."
                                              }
                                            },
                                            "defaultEncryptionScope": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                                              }
                                            },
                                            "denyEncryptionScopeOverride": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Block override of encryption scope from the container default."
                                              }
                                            },
                                            "enableNfsV3AllSquash": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Enable NFSv3 all squash on blob container."
                                              }
                                            },
                                            "enableNfsV3RootSquash": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Enable NFSv3 root squash on blob container."
                                              }
                                            },
                                            "immutableStorageWithVersioningEnabled": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                                              }
                                            },
                                            "immutabilityPolicyName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPolicyProperties": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Configure immutability policy."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "metadata": {
                                                "__bicep_resource_derived_type!": {
                                                  "source": "Microsoft.Storage/storageAccounts/blobServices/containers@2024-01-01#properties/properties/properties/metadata"
                                                },
                                                "description": "Optional. A name-value pair to associate with the container as metadata."
                                              },
                                              "defaultValue": {}
                                            },
                                            "publicAccess": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Container",
                                                "Blob",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::blobServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('blobServiceName'))]"
                                            },
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.storage-blobcontainer.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2024-01-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "container": {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                              "properties": {
                                                "defaultEncryptionScope": "[parameters('defaultEncryptionScope')]",
                                                "denyEncryptionScopeOverride": "[parameters('denyEncryptionScopeOverride')]",
                                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                                "metadata": "[parameters('metadata')]",
                                                "publicAccess": "[parameters('publicAccess')]"
                                              }
                                            },
                                            "container_roleAssignments": {
                                              "copy": {
                                                "name": "container_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "container"
                                              ]
                                            },
                                            "immutabilityPolicy": {
                                              "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-{1}', parameters('name'), parameters('immutabilityPolicyName'))]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "storageAccountName": {
                                                    "value": "[parameters('storageAccountName')]"
                                                  },
                                                  "containerName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "immutabilityPeriodSinceCreationInDays": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                                  },
                                                  "allowProtectedAppendWrites": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                                  },
                                                  "allowProtectedAppendWritesAll": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.37.4.10188",
                                                      "templateHash": "2858994808980111017"
                                                    },
                                                    "name": "Storage Account Blob Container Immutability Policies",
                                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy."
                                                  },
                                                  "parameters": {
                                                    "storageAccountName": {
                                                      "type": "string",
                                                      "maxLength": 24,
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "containerName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "immutabilityPeriodSinceCreationInDays": {
                                                      "type": "int",
                                                      "defaultValue": 365,
                                                      "metadata": {
                                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                                      }
                                                    },
                                                    "allowProtectedAppendWrites": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                                      }
                                                    },
                                                    "allowProtectedAppendWritesAll": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                                      }
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                                      "apiVersion": "2024-01-01",
                                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                                      "properties": {
                                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                                      }
                                                    }
                                                  ],
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the deployed immutability policy."
                                                      },
                                                      "value": "default"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the deployed immutability policy."
                                                      },
                                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group of the deployed immutability policy."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "container"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed container."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed container."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed container."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "blobServices"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed blob service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed blob service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed blob service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_fileServices": {
                              "condition": "[not(empty(parameters('fileServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                                  },
                                  "protocolSettings": {
                                    "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                                  },
                                  "shareDeleteRetentionPolicy": {
                                    "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                                  },
                                  "shares": {
                                    "value": "[tryGet(parameters('fileServices'), 'shares')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "2735186993322606805"
                                    },
                                    "name": "Storage Account File Share Services",
                                    "description": "This module deploys a Storage Account File Share Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the file service."
                                      }
                                    },
                                    "protocolSettings": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/protocolSettings"
                                        },
                                        "description": "Optional. Protocol settings for file service."
                                      },
                                      "defaultValue": {}
                                    },
                                    "shareDeleteRetentionPolicy": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/shareDeleteRetentionPolicy"
                                        },
                                        "description": "Optional. The service properties for soft delete."
                                      },
                                      "defaultValue": {
                                        "enabled": true,
                                        "days": 7
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "shares": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. File shares to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "enableReferencedModulesTelemetry": false
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "fileServices": {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                        "protocolSettings": "[parameters('protocolSettings')]",
                                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                                      }
                                    },
                                    "fileServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "fileServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "fileServices"
                                      ]
                                    },
                                    "fileServices_shares": {
                                      "copy": {
                                        "name": "fileServices_shares",
                                        "count": "[length(coalesce(parameters('shares'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "fileServicesName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                                          },
                                          "accessTier": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                                          },
                                          "enabledProtocols": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                                          },
                                          "rootSquash": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                                          },
                                          "shareQuota": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.37.4.10188",
                                              "templateHash": "15881640847294537074"
                                            },
                                            "name": "Storage Account File Shares",
                                            "description": "This module deploys a Storage Account File Share."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "fileServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the file share to create."
                                              }
                                            },
                                            "accessTier": {
                                              "type": "string",
                                              "defaultValue": "TransactionOptimized",
                                              "allowedValues": [
                                                "Premium",
                                                "Hot",
                                                "Cool",
                                                "TransactionOptimized"
                                              ],
                                              "metadata": {
                                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                                              }
                                            },
                                            "shareQuota": {
                                              "type": "int",
                                              "defaultValue": 5120,
                                              "metadata": {
                                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                                              }
                                            },
                                            "enabledProtocols": {
                                              "type": "string",
                                              "defaultValue": "SMB",
                                              "allowedValues": [
                                                "NFS",
                                                "SMB"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                              }
                                            },
                                            "rootSquash": {
                                              "type": "string",
                                              "defaultValue": "NoRootSquash",
                                              "allowedValues": [
                                                "AllSquash",
                                                "NoRootSquash",
                                                "RootSquash"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::fileService": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]"
                                            },
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.storage-fileshare.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2024-01-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "fileShare": {
                                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                              "properties": {
                                                "accessTier": "[parameters('accessTier')]",
                                                "shareQuota": "[parameters('shareQuota')]",
                                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                                "enabledProtocols": "[parameters('enabledProtocols')]"
                                              }
                                            },
                                            "fileShare_roleAssignments": {
                                              "copy": {
                                                "name": "fileShare_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[replace(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), '/shares/', '/fileshares/')]"
                                                  },
                                                  "name": {
                                                    "value": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                                                  },
                                                  "principalId": {
                                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
                                                  },
                                                  "principalType": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                                  },
                                                  "condition": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
                                                  },
                                                  "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
                                                  "delegatedManagedIdentityResourceId": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                  },
                                                  "description": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "parameters": {
                                                    "scope": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The scope to deploy the role assignment to."
                                                      }
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The name of the role assignment."
                                                      }
                                                    },
                                                    "roleDefinitionId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The role definition Id to assign."
                                                      }
                                                    },
                                                    "principalId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                      }
                                                    },
                                                    "principalType": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Device",
                                                        "ForeignGroup",
                                                        "Group",
                                                        "ServicePrincipal",
                                                        "User",
                                                        ""
                                                      ],
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The principal type of the assigned principal ID."
                                                      }
                                                    },
                                                    "description": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The description of the role assignment."
                                                      }
                                                    },
                                                    "condition": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                                      }
                                                    },
                                                    "conditionVersion": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "2.0"
                                                      ],
                                                      "defaultValue": "2.0",
                                                      "metadata": {
                                                        "description": "Optional. Version of the condition."
                                                      }
                                                    },
                                                    "delegatedManagedIdentityResourceId": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                      }
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2022-04-01",
                                                      "scope": "[parameters('scope')]",
                                                      "name": "[parameters('name')]",
                                                      "properties": {
                                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                        "principalId": "[parameters('principalId')]",
                                                        "description": "[parameters('description')]",
                                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "dependsOn": [
                                                "fileShare"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed file share."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed file share."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed file share."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "fileServices",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_queueServices": {
                              "condition": "[not(empty(parameters('queueServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                                  },
                                  "queues": {
                                    "value": "[tryGet(parameters('queueServices'), 'queues')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "1100093319443502715"
                                    },
                                    "name": "Storage Account Queue Services",
                                    "description": "This module deploys a Storage Account Queue Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "queues": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Queues to create."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "queueServices": {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                                      }
                                    },
                                    "queueServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "queueServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "queueServices"
                                      ]
                                    },
                                    "queueServices_queues": {
                                      "copy": {
                                        "name": "queueServices_queues",
                                        "count": "[length(coalesce(parameters('queues'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.37.4.10188",
                                              "templateHash": "17963799770990303971"
                                            },
                                            "name": "Storage Account Queues",
                                            "description": "This module deploys a Storage Account Queue."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the storage queue to deploy."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "metadata": {
                                                "__bicep_resource_derived_type!": {
                                                  "source": "Microsoft.Storage/storageAccounts/queueServices/queues@2024-01-01#properties/properties/properties/metadata"
                                                },
                                                "description": "Optional. A name-value pair that represents queue metadata."
                                              },
                                              "defaultValue": {}
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::queueServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2024-01-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "queue": {
                                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]"
                                              }
                                            },
                                            "queue_roleAssignments": {
                                              "copy": {
                                                "name": "queue_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "queue"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed queue."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed queue."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed queue."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_tableServices": {
                              "condition": "[not(empty(parameters('tableServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(parameters('tableServices'), 'tables')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('tableServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "13069389074590786512"
                                    },
                                    "name": "Storage Account Table Services",
                                    "description": "This module deploys a Storage Account Table Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. tables to create."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "tableServices": {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                                      }
                                    },
                                    "tableServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "tableServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "tableServices"
                                      ]
                                    },
                                    "tableServices_tables": {
                                      "copy": {
                                        "name": "tableServices_tables",
                                        "count": "[length(parameters('tables'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('tables')[copyIndex()].name]"
                                          },
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.37.4.10188",
                                              "templateHash": "10905926757212375091"
                                            },
                                            "name": "Storage Account Table",
                                            "description": "This module deploys a Storage Account Table."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the table."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::tableServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2024-01-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "table": {
                                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "table_roleAssignments": {
                                              "copy": {
                                                "name": "table_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "table"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed file share service."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed file share service."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed file share service."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed table service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed table service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed table service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "secretsExport": {
                              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                              "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                                  },
                                  "secretsToSet": {
                                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[0].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString1Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[1].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString2Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage))), createArray()))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.37.4.10188",
                                      "templateHash": "9368972709899985618"
                                    }
                                  },
                                  "definitions": {
                                    "secretSetOutputType": {
                                      "type": "object",
                                      "properties": {
                                        "secretResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The resourceId of the exported secret."
                                          }
                                        },
                                        "secretUri": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The secret URI of the exported secret."
                                          }
                                        },
                                        "secretUriWithVersion": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The secret URI with version of the exported secret."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "secretToSetType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the secret to set."
                                          }
                                        },
                                        "value": {
                                          "type": "securestring",
                                          "metadata": {
                                            "description": "Required. The value of the secret to set."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Key Vault to set the ecrets in."
                                      }
                                    },
                                    "secretsToSet": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/secretToSetType"
                                      },
                                      "metadata": {
                                        "description": "Required. The secrets to set in the Key Vault."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2024-11-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "secrets": {
                                      "copy": {
                                        "name": "secrets",
                                        "count": "[length(parameters('secretsToSet'))]"
                                      },
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2024-11-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                                      "properties": {
                                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "secretsSet": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/secretSetOutputType"
                                      },
                                      "metadata": {
                                        "description": "The references to the secrets exported to the provided Key Vault."
                                      },
                                      "copy": {
                                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                        "input": {
                                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                          "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed storage account."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed storage account."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed storage account."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "primaryBlobEndpoint": {
                              "type": "string",
                              "metadata": {
                                "description": "The primary blob endpoint reference if blob services are deployed."
                              },
                              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[tryGet(tryGet(reference('storageAccount', '2024-01-01', 'full'), 'identity'), 'principalId')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('storageAccount', '2024-01-01', 'full').location]"
                            },
                            "serviceEndpoints": {
                              "type": "object",
                              "metadata": {
                                "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
                              },
                              "value": "[reference('storageAccount').primaryEndpoints]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointOutputType"
                              },
                              "metadata": {
                                "description": "The private endpoints of the Storage Account."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                "input": {
                                  "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[tryGet(tryGet(reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                  "customDnsConfigs": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                  "networkInterfaceResourceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                }
                              }
                            },
                            "exportedSecrets": {
                              "$ref": "#/definitions/secretsOutputType",
                              "metadata": {
                                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                              },
                              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                            },
                            "primaryAccessKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The primary access key of the storage account."
                              },
                              "value": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                            },
                            "secondaryAccessKey": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The secondary access key of the storage account."
                              },
                              "value": "[listKeys('storageAccount', '2024-01-01').keys[1].value]"
                            },
                            "primaryConnectionString": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The primary connection string of the storage account."
                              },
                              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage)]"
                            },
                            "secondaryConnectionString": {
                              "type": "securestring",
                              "metadata": {
                                "description": "The secondary connection string of the storage account."
                              },
                              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage)]"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "backofficeRG"
              ]
            },
            "appService": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('appService-{0}', uniqueString('appService', deployment().name))]",
              "resourceGroup": "rg-dev-backoffice",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "10365568772074482076"
                    }
                  },
                  "parameters": {
                    "appServicePlanId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "appServicePlanDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "asp-dev-backoffice"
                          },
                          "kind": {
                            "value": "windows"
                          },
                          "skuName": {
                            "value": "F1"
                          },
                          "skuCapacity": {
                            "value": 1
                          },
                          "zoneRedundant": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "16945786131371363466"
                            },
                            "name": "App Service Plan",
                            "description": "This module deploys an App Service Plan."
                          },
                          "definitions": {
                            "diagnosticSettingMetricsOnlyType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of diagnostic setting."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "notes": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the notes of the lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 60,
                              "metadata": {
                                "description": "Required. Name of the app service plan."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "P1v3",
                              "metadata": {
                                "example": "  'F1'\n  'B1'\n  'P1v3'\n  'I1v2'\n  'FC1'\n  ",
                                "description": "Optional. The name of the SKU will Determine the tier, size, family of the App Service Plan. This defaults to P1v3 to leverage availability zones."
                              }
                            },
                            "skuCapacity": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Number of workers associated with the App Service Plan. This defaults to 3, to leverage availability zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "app",
                              "allowedValues": [
                                "app",
                                "elastic",
                                "functionapp",
                                "windows",
                                "linux"
                              ],
                              "metadata": {
                                "description": "Optional. Kind of server OS."
                              }
                            },
                            "reserved": {
                              "type": "bool",
                              "defaultValue": "[equals(parameters('kind'), 'linux')]",
                              "metadata": {
                                "description": "Conditional. Defaults to false when creating Windows/app App Service Plan. Required if creating a Linux App Service Plan and must be set to true."
                              }
                            },
                            "appServiceEnvironmentResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
                              }
                            },
                            "workerTierName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Target worker tier assigned to the App Service plan."
                              }
                            },
                            "perSiteScaling": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                              }
                            },
                            "elasticScaleEnabled": {
                              "type": "bool",
                              "defaultValue": "[greater(parameters('maximumElasticWorkerCount'), 1)]",
                              "metadata": {
                                "description": "Optional. Enable/Disable ElasticScaleEnabled App Service Plan."
                              }
                            },
                            "maximumElasticWorkerCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                              }
                            },
                            "targetWorkerCount": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Scaling worker count."
                              }
                            },
                            "targetWorkerSize": {
                              "type": "int",
                              "defaultValue": 0,
                              "allowedValues": [
                                0,
                                1,
                                2
                              ],
                              "metadata": {
                                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": "[if(or(startsWith(parameters('skuName'), 'P'), startsWith(parameters('skuName'), 'EP')), true(), false())]",
                              "metadata": {
                                "description": "Optional. Zone Redundant server farms can only be used on Premium or ElasticPremium SKU tiers within ZRS Supported regions (https://learn.microsoft.com/en-us/azure/storage/common/redundancy-regions-zrs)."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/serverfarms@2024-11-01#properties/tags"
                                },
                                "description": "Optional. Tags of the resource."
                              },
                              "nullable": true
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.web-serverfarm.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "appServicePlan": {
                              "type": "Microsoft.Web/serverfarms",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('name')]",
                              "kind": "[parameters('kind')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": "[if(equals(parameters('skuName'), 'FC1'), createObject('name', parameters('skuName'), 'tier', 'FlexConsumption'), createObject('name', parameters('skuName'), 'capacity', parameters('skuCapacity')))]",
                              "properties": {
                                "workerTierName": "[parameters('workerTierName')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                "perSiteScaling": "[parameters('perSiteScaling')]",
                                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                                "elasticScaleEnabled": "[parameters('elasticScaleEnabled')]",
                                "reserved": "[parameters('reserved')]",
                                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                                "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                                "zoneRedundant": "[parameters('zoneRedundant')]"
                              }
                            },
                            "appServicePlan_diagnosticSettings": {
                              "copy": {
                                "name": "appServicePlan_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            },
                            "appServicePlan_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            },
                            "appServicePlan_roleAssignments": {
                              "copy": {
                                "name": "appServicePlan_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/serverfarms', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the app service plan was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app service plan."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the app service plan."
                              },
                              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('appServicePlan', '2024-11-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "appServiceDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "kind": {
                            "value": "app,container,windows"
                          },
                          "name": {
                            "value": "as-dev-backoffice"
                          },
                          "serverFarmResourceId": "[if(empty(parameters('appServicePlanId')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment'), '2022-09-01').outputs.resourceId.value), createObject('value', parameters('appServicePlanId')))]",
                          "siteConfig": {
                            "value": {
                              "alwaysOn": false,
                              "ftpsState": "FtpsOnly",
                              "minTlsVersion": "1.2",
                              "windowsFxVersion": "DOCKER|mcr.microsoft.com/azure-app-service/windows/parkingpage:latest",
                              "appSettings": [
                                {
                                  "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                                  "value": "false"
                                }
                              ]
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "9717547679970925290"
                            },
                            "name": "Web/Function Apps",
                            "description": "This module deploys a Web or Function App."
                          },
                          "definitions": {
                            "privateEndpointOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the private endpoint."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the private endpoint."
                                  }
                                },
                                "groupId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The group Id for the private endpoint Group."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "fqdn": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "FQDN that resolves to private endpoint IP address."
                                        }
                                      },
                                      "ipAddresses": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "A list of private IP addresses of the private endpoint."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "The custom DNS configurations of the private endpoint."
                                  }
                                },
                                "networkInterfaceResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "The IDs of the network interfaces associated with the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "configType": {
                              "type": "object",
                              "discriminator": {
                                "propertyName": "name",
                                "mapping": {
                                  "appsettings": {
                                    "$ref": "#/definitions/appSettingsConfigType"
                                  },
                                  "authsettings": {
                                    "$ref": "#/definitions/authSettingsConfigType"
                                  },
                                  "authsettingsV2": {
                                    "$ref": "#/definitions/authSettingsV2ConfigType"
                                  },
                                  "azurestorageaccounts": {
                                    "$ref": "#/definitions/azureStorageAccountConfigType"
                                  },
                                  "backup": {
                                    "$ref": "#/definitions/backupConfigType"
                                  },
                                  "connectionstrings": {
                                    "$ref": "#/definitions/connectionStringsConfigType"
                                  },
                                  "logs": {
                                    "$ref": "#/definitions/logsConfigType"
                                  },
                                  "metadata": {
                                    "$ref": "#/definitions/metadataConfigType"
                                  },
                                  "pushsettings": {
                                    "$ref": "#/definitions/pushSettingsConfigType"
                                  },
                                  "slotConfigNames": {
                                    "$ref": "#/definitions/slotConfigNamesConfigType"
                                  },
                                  "web": {
                                    "$ref": "#/definitions/webConfigType"
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type of a site configuration."
                              }
                            },
                            "slotConfigNamesConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "slotConfigNames"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "appSettingNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. List of application settings names."
                                      }
                                    },
                                    "azureStorageConfigNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. List of external Azure storage account identifiers."
                                      }
                                    },
                                    "connectionStringNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. List of connection string names."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type of a slotConfigNames configuration."
                              }
                            },
                            "slotType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the slot."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Location for all Resources."
                                  }
                                },
                                "serverFarmResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the app service plan to use for the slot."
                                  }
                                },
                                "managedEnvironmentResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                                  }
                                },
                                "httpsOnly": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                                  }
                                },
                                "clientAffinityEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If client affinity is enabled."
                                  }
                                },
                                "appServiceEnvironmentResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the app service environment to use for this resource."
                                  }
                                },
                                "managedIdentities": {
                                  "$ref": "#/definitions/managedIdentityAllType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The managed identity definition for this resource."
                                  }
                                },
                                "keyVaultAccessIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                                  }
                                },
                                "storageAccountRequired": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Checks if Customer provided storage account is required."
                                  }
                                },
                                "virtualNetworkSubnetResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                                  }
                                },
                                "siteConfig": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                                    },
                                    "description": "Optional. The site config object."
                                  },
                                  "nullable": true
                                },
                                "functionAppConfig": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/functionAppConfig"
                                    },
                                    "description": "Optional. The Function App config object."
                                  },
                                  "nullable": true
                                },
                                "configs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/configType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The web site config."
                                  }
                                },
                                "extensions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The extensions configuration."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lock settings of the service."
                                  }
                                },
                                "privateEndpoints": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateEndpointSingleServiceType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Configuration details for private endpoints."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags of the resource."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "diagnosticSettings": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/diagnosticSettingFullType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The diagnostic settings of the service."
                                  }
                                },
                                "clientCertEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                                  }
                                },
                                "clientCertExclusionPaths": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                                  }
                                },
                                "clientCertMode": {
                                  "type": "string",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/clientCertMode"
                                    },
                                    "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                                  },
                                  "nullable": true
                                },
                                "cloningInfo": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/cloningInfo"
                                    },
                                    "description": "Optional. If specified during app creation, the app is cloned from a source app."
                                  },
                                  "nullable": true
                                },
                                "containerSize": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Size of the function container."
                                  }
                                },
                                "customDomainVerificationId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                                  }
                                },
                                "dailyMemoryTimeQuota": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                                  }
                                },
                                "hostNameSslStates": {
                                  "type": "array",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                                    },
                                    "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                                  },
                                  "nullable": true
                                },
                                "hyperV": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Hyper-V sandbox."
                                  }
                                },
                                "publicNetworkAccess": {
                                  "type": "string",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/publicNetworkAccess"
                                    },
                                    "description": "Optional. Allow or block all public traffic."
                                  },
                                  "nullable": true
                                },
                                "redundancyMode": {
                                  "type": "string",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/redundancyMode"
                                    },
                                    "description": "Optional. Site redundancy mode."
                                  },
                                  "nullable": true
                                },
                                "basicPublishingCredentialsPolicies": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                                  }
                                },
                                "vnetContentShareEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. To enable accessing content over virtual network."
                                  }
                                },
                                "vnetImagePullEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. To enable pulling image over Virtual Network."
                                  }
                                },
                                "vnetRouteAllEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                                  }
                                },
                                "hybridConnectionRelays": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/hybridConnectionRelayType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Names of hybrid connection relays to connect app with."
                                  }
                                },
                                "dnsConfiguration": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                                    },
                                    "description": "Optional. Property to configure various DNS related settings for a site."
                                  },
                                  "nullable": true
                                },
                                "autoGeneratedDomainNameLabelScope": {
                                  "type": "string",
                                  "allowedValues": [
                                    "NoReuse",
                                    "ResourceGroupReuse",
                                    "SubscriptionReuse",
                                    "TenantReuse"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type of a slot."
                              }
                            },
                            "extensionType": {
                              "type": "object",
                              "properties": {
                                "properties": {
                                  "type": "object",
                                  "metadata": {
                                    "__bicep_resource_derived_type!": {
                                      "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                                    },
                                    "description": "Optional. Sets the properties."
                                  },
                                  "nullable": true
                                }
                              }
                            },
                            "basicPublishingCredentialsPolicyType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "ftp",
                                    "scm"
                                  ],
                                  "metadata": {
                                    "description": "Required. The name of the resource."
                                  }
                                },
                                "allow": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to true to enable or false to disable a publishing method."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Location for all Resources."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type of a basic publishing credential policy."
                              }
                            },
                            "hybridConnectionRelayType": {
                              "type": "object",
                              "properties": {
                                "hybridConnectionResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of the relay namespace hybrid connection."
                                  }
                                },
                                "sendKeyName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the authorization rule send key to use."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type of a hybrid connection relay."
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "_2.scmIpSecurityRestrictionType": {
                              "type": "object",
                              "properties": {
                                "action": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Allow",
                                    "Deny"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Allow or Deny access for this IP range."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. IP restriction rule description."
                                  }
                                },
                                "headers": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A header."
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                                  }
                                },
                                "ipAddress": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. IP restriction rule name."
                                  }
                                },
                                "priority": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Priority of IP restriction rule."
                                  }
                                },
                                "subnetMask": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                                  }
                                },
                                "subnetTrafficTag": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. (internal) Subnet traffic tag."
                                  }
                                },
                                "tag": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Default",
                                    "ServiceTag",
                                    "XffProxy"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                                  }
                                },
                                "vnetSubnetResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Virtual network resource id."
                                  }
                                },
                                "vnetTrafficTag": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. (internal) Vnet traffic tag."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a IP security restriction.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "_2.slowRequestBasedTriggerType": {
                              "type": "object",
                              "properties": {
                                "count": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Request Count."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Request Path."
                                  }
                                },
                                "timeInterval": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time interval."
                                  }
                                },
                                "timeTaken": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time taken."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of aslow request based trigger.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "appSettingsConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "appsettings"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "storageAccountUseIdentityAuthentication": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                  }
                                },
                                "applicationInsightResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the application insight to leverage for this resource."
                                  }
                                },
                                "retainCurrentAppSettings": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The retain the current app settings. Defaults to true."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. An app settings key-value pair."
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of an app settings configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "authSettingsConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "authsettings"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "aadClaimsAuthorization": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                                      }
                                    },
                                    "additionalLoginParams": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                      }
                                    },
                                    "allowedAudiences": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                                      }
                                    },
                                    "allowedExternalRedirectUrls": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                      }
                                    },
                                    "authFilePath": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                      }
                                    },
                                    "clientSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                      }
                                    },
                                    "clientSecretCertificateThumbprint": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                      }
                                    },
                                    "clientSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                      }
                                    },
                                    "configVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                                      }
                                    },
                                    "defaultProvider": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureActiveDirectory",
                                        "Facebook",
                                        "Github",
                                        "Google",
                                        "MicrosoftAccount",
                                        "Twitter"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                      }
                                    },
                                    "facebookAppId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                      }
                                    },
                                    "facebookAppSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                      }
                                    },
                                    "facebookAppSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                                      }
                                    },
                                    "facebookOAuthScopes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                      }
                                    },
                                    "gitHubClientId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                                      }
                                    },
                                    "gitHubClientSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                                      }
                                    },
                                    "gitHubClientSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                                      }
                                    },
                                    "gitHubOAuthScopes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                                      }
                                    },
                                    "googleClientId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                      }
                                    },
                                    "googleClientSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                      }
                                    },
                                    "googleClientSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                                      }
                                    },
                                    "googleOAuthScopes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                      }
                                    },
                                    "isAuthFromFile": {
                                      "type": "string",
                                      "allowedValues": [
                                        "false",
                                        "true"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                      }
                                    },
                                    "microsoftAccountClientId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                                      }
                                    },
                                    "microsoftAccountClientSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                                      }
                                    },
                                    "microsoftAccountClientSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                                      }
                                    },
                                    "microsoftAccountOAuthScopes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                                      }
                                    },
                                    "runtimeVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                      }
                                    },
                                    "tokenRefreshExtensionHours": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                      }
                                    },
                                    "tokenStoreEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                                      }
                                    },
                                    "twitterConsumerKey": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                      }
                                    },
                                    "twitterConsumerSecret": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                      }
                                    },
                                    "twitterConsumerSecretSettingName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                      }
                                    },
                                    "unauthenticatedClientAction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AllowAnonymous",
                                        "RedirectToLoginPage"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                      }
                                    },
                                    "validateIssuer": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of an auth settings configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "authSettingsV2ConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "authsettingsV2"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "globalValidation": {
                                      "type": "object",
                                      "properties": {
                                        "excludedPaths": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                                          }
                                        },
                                        "redirectToProvider": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                          }
                                        },
                                        "requireAuthentication": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `true` if the authentication flow is required by every request."
                                          }
                                        },
                                        "unauthenticatedClientAction": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AllowAnonymous",
                                            "RedirectToLoginPage",
                                            "Return401",
                                            "Return403"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                                      }
                                    },
                                    "httpSettings": {
                                      "type": "object",
                                      "properties": {
                                        "forwardProxy": {
                                          "type": "object",
                                          "properties": {
                                            "convention": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Custom",
                                                "NoProxy",
                                                "Standard"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The convention used to determine the url of the request made."
                                              }
                                            },
                                            "customHostHeaderName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The name of the header containing the host of the request."
                                              }
                                            },
                                            "customProtoHeaderName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The name of the header containing the scheme of the request."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                                          }
                                        },
                                        "requireHttps": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                                          }
                                        },
                                        "routes": {
                                          "type": "object",
                                          "properties": {
                                            "apiPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the paths HTTP requests."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                                      }
                                    },
                                    "identityProviders": {
                                      "type": "object",
                                      "properties": {
                                        "apple": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of the app used for login."
                                                  }
                                                },
                                                "clientSecretSettingName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The app setting name that contains the client secret."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Apple registration."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Apple provider."
                                          }
                                        },
                                        "azureActiveDirectory": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "isAutoProvisioned": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "disableWWWAuthenticate": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                                  }
                                                },
                                                "loginParameters": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                                  }
                                                },
                                                "clientSecretCertificateIssuer": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                                  }
                                                },
                                                "clientSecretCertificateSubjectAlternativeName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                                  }
                                                },
                                                "clientSecretCertificateThumbprint": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                                  }
                                                },
                                                "clientSecretSettingName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                                  }
                                                },
                                                "openIdIssuer": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                                              }
                                            },
                                            "validation": {
                                              "type": "object",
                                              "properties": {
                                                "allowedAudiences": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                                  }
                                                },
                                                "defaultAuthorizationPolicy": {
                                                  "type": "object",
                                                  "properties": {
                                                    "allowedApplications": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                                      }
                                                    },
                                                    "allowedPrincipals": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groups": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The list of the allowed groups."
                                                          }
                                                        },
                                                        "identities": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The list of the allowed identities."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the default authorization policy."
                                                  }
                                                },
                                                "jwtClaimChecks": {
                                                  "type": "object",
                                                  "properties": {
                                                    "allowedClientApplications": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The list of the allowed client applications."
                                                      }
                                                    },
                                                    "allowedGroups": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The list of the allowed groups."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Azure Active directory provider."
                                          }
                                        },
                                        "azureStaticWebApps": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of the app used for login."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                                          }
                                        },
                                        "customOpenIdConnectProviders": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                                }
                                              },
                                              "login": {
                                                "type": "object",
                                                "properties": {
                                                  "nameClaimType": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of the claim that contains the users name."
                                                    }
                                                  },
                                                  "scopes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                    }
                                                  }
                                                },
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                                }
                                              },
                                              "registration": {
                                                "type": "object",
                                                "properties": {
                                                  "clientCredential": {
                                                    "type": "object",
                                                    "properties": {
                                                      "clientSecretSettingName": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                                        }
                                                      },
                                                      "method": {
                                                        "type": "string",
                                                        "allowedValues": [
                                                          "ClientSecretPost"
                                                        ],
                                                        "metadata": {
                                                          "description": "Required. The method that should be used to authenticate the user."
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                                    }
                                                  },
                                                  "clientId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The client id of the custom Open ID Connect provider."
                                                    }
                                                  },
                                                  "openIdConnectConfiguration": {
                                                    "type": "object",
                                                    "properties": {
                                                      "authorizationEndpoint": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The endpoint to be used to make an authorization request."
                                                        }
                                                      },
                                                      "certificationUri": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                                        }
                                                      },
                                                      "issuer": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The endpoint that issues the token."
                                                        }
                                                      },
                                                      "tokenEndpoint": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The endpoint to be used to request a token."
                                                        }
                                                      },
                                                      "wellKnownOpenIdConfiguration": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                                    }
                                                  }
                                                },
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The alias of each custom Open ID Connect provider."
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                                          }
                                        },
                                        "facebook": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "graphApiVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The version of the Facebook api to be used while logging in."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "appId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The App ID of the app used for login."
                                                  }
                                                },
                                                "appSecretSettingName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The app setting name that contains the app secret."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Facebook provider."
                                          }
                                        },
                                        "gitHub": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of the app used for login."
                                                  }
                                                },
                                                "clientSecretSettingName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The app setting name that contains the client secret."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the GitHub provider."
                                          }
                                        },
                                        "google": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of the app used for login."
                                                  }
                                                },
                                                "clientSecretSettingName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The app setting name that contains the client secret."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the app registration for the Google provider."
                                              }
                                            },
                                            "validation": {
                                              "type": "object",
                                              "properties": {
                                                "allowedAudiences": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Google provider."
                                          }
                                        },
                                        "legacyMicrosoftAccount": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "scopes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "clientId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The Client ID of the app used for login."
                                                  }
                                                },
                                                "clientSecretSettingName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The app setting name that contains the client secret."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                                              }
                                            },
                                            "validation": {
                                              "type": "object",
                                              "properties": {
                                                "allowedAudiences": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                                          }
                                        },
                                        "twitter": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                                              }
                                            },
                                            "registration": {
                                              "type": "object",
                                              "properties": {
                                                "consumerKey": {
                                                  "type": "securestring",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                                  }
                                                },
                                                "consumerSecretSettingName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the Twitter provider."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                                      }
                                    },
                                    "login": {
                                      "type": "object",
                                      "properties": {
                                        "allowedExternalRedirectUrls": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                          }
                                        },
                                        "cookieExpiration": {
                                          "type": "object",
                                          "properties": {
                                            "convention": {
                                              "type": "string",
                                              "allowedValues": [
                                                "FixedTime",
                                                "IdentityProviderDerived"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The convention used when determining the session cookie's expiration."
                                              }
                                            },
                                            "timeToExpiration": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The time after the request is made when the session cookie should expire."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the session cookie's expiration."
                                          }
                                        },
                                        "nonce": {
                                          "type": "object",
                                          "properties": {
                                            "nonceExpirationInterval": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The time after the request is made when the nonce should expire."
                                              }
                                            },
                                            "validateNonce": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the nonce used in the login flow."
                                          }
                                        },
                                        "preserveUrlFragmentsForLogins": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                                          }
                                        },
                                        "routes": {
                                          "type": "object",
                                          "properties": {
                                            "logoutEndpoint": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The endpoint at which a logout request should be made."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                                          }
                                        },
                                        "tokenStore": {
                                          "type": "object",
                                          "properties": {
                                            "azureBlobStorage": {
                                              "type": "object",
                                              "properties": {
                                                "sasUrlSettingName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                                              }
                                            },
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                                              }
                                            },
                                            "fileSystem": {
                                              "type": "object",
                                              "properties": {
                                                "directory": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The directory in which the tokens will be stored."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                                              }
                                            },
                                            "tokenRefreshExtensionHours": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The configuration settings of the token store."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                                      }
                                    },
                                    "platform": {
                                      "type": "object",
                                      "properties": {
                                        "configFilePath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                          }
                                        },
                                        "runtimeVersion": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of an authSettingsV2 configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "azureStorageAccountConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "azurestorageaccounts"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "accessKey": {
                                        "type": "securestring",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Access key for the storage account."
                                        }
                                      },
                                      "accountName": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of the storage account."
                                        }
                                      },
                                      "mountPath": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Path to mount the storage within the site's runtime environment."
                                        }
                                      },
                                      "protocol": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Http",
                                          "Nfs",
                                          "Smb"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Mounting protocol to use for the storage account."
                                        }
                                      },
                                      "shareName": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of the file share (container name, for Blob storage)."
                                        }
                                      },
                                      "type": {
                                        "type": "string",
                                        "allowedValues": [
                                          "AzureBlob",
                                          "AzureFiles"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Type of storage."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Azure Storage Info configuration."
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of an Azure Storage Account configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "backupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "backup"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "backupName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Name of the backup."
                                      }
                                    },
                                    "backupSchedule": {
                                      "type": "object",
                                      "properties": {
                                        "frequencyInterval": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                                          }
                                        },
                                        "frequencyUnit": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Day",
                                            "Hour"
                                          ],
                                          "metadata": {
                                            "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                                          }
                                        },
                                        "keepAtLeastOneBackup": {
                                          "type": "bool",
                                          "metadata": {
                                            "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                                          }
                                        },
                                        "retentionPeriodInDays": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. After how many days backups should be deleted."
                                          }
                                        },
                                        "startTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. When the schedule should start working."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Schedule for the backup if it is executed periodically."
                                      }
                                    },
                                    "databases": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "connectionString": {
                                            "type": "securestring",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                                            }
                                          },
                                          "connectionStringName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                                            }
                                          },
                                          "databaseType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "LocalMySql",
                                              "MySql",
                                              "PostgreSql",
                                              "SqlAzure"
                                            ],
                                            "metadata": {
                                              "description": "Required. Database type (e.g. SqlAzure / MySql)."
                                            }
                                          },
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the setting."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Databases included in the backup."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                                      }
                                    },
                                    "storageAccountUrl": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SAS URL to the container."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type for a backup configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "connectionStringsConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "connectionstrings"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "allowedValues": [
                                          "ApiHub",
                                          "Custom",
                                          "DocDb",
                                          "EventHub",
                                          "MySql",
                                          "NotificationHub",
                                          "PostgreSQL",
                                          "RedisCache",
                                          "SQLAzure",
                                          "SQLServer",
                                          "ServiceBus"
                                        ],
                                        "metadata": {
                                          "description": "Required. Type of database."
                                        }
                                      },
                                      "value": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Value of pair."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the connection string setting."
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type for a connection string configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "notes": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the notes of the lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "logsConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "logs"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "applicationLogs": {
                                      "type": "object",
                                      "properties": {
                                        "azureBlobStorage": {
                                          "type": "object",
                                          "properties": {
                                            "level": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Error",
                                                "Information",
                                                "Off",
                                                "Verbose",
                                                "Warning"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Log level."
                                              }
                                            },
                                            "retentionInDays": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                              }
                                            },
                                            "sasUrl": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application logs to blob storage configuration."
                                          }
                                        },
                                        "azureTableStorage": {
                                          "type": "object",
                                          "properties": {
                                            "level": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Error",
                                                "Information",
                                                "Off",
                                                "Verbose",
                                                "Warning"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Log level."
                                              }
                                            },
                                            "sasUrl": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application logs to azure table storage configuration."
                                          }
                                        },
                                        "fileSystem": {
                                          "type": "object",
                                          "properties": {
                                            "level": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Error",
                                                "Information",
                                                "Off",
                                                "Verbose",
                                                "Warning"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Log level."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application logs to file system configuration."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application Logs for Azure configuration."
                                      }
                                    },
                                    "detailedErrorMessages": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Detailed error messages configuration."
                                      }
                                    },
                                    "failedRequestsTracing": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Failed requests tracing configuration."
                                      }
                                    },
                                    "httpLogs": {
                                      "type": "object",
                                      "properties": {
                                        "azureBlobStorage": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                              }
                                            },
                                            "retentionInDays": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                              }
                                            },
                                            "sasUrl": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Http logs to azure blob storage configuration."
                                          }
                                        },
                                        "fileSystem": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                              }
                                            },
                                            "retentionInDays": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                                              }
                                            },
                                            "retentionInMb": {
                                              "type": "int",
                                              "nullable": true,
                                              "minValue": 25,
                                              "maxValue": 100,
                                              "metadata": {
                                                "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Http logs to file system configuration."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. HTTP logs configuration."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a logs configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "metadataConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "metadata"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata key value pair."
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a metadata configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "privateEndpointSingleServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private Endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the Private Endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "resourceGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "pushSettingsConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "pushsettings"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "dynamicTagsJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                      }
                                    },
                                    "isPushEnabled": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                      }
                                    },
                                    "tagsRequiringAuth": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                      }
                                    },
                                    "tagWhitelistJson": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a pushSettings configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "webConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "allowedValues": [
                                    "web"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of config."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "acrUseManagedIdentityCreds": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                                      }
                                    },
                                    "acrUserManagedIdentityID": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. If using user managed identity, the user managed identity ClientId."
                                      }
                                    },
                                    "alwaysOn": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if 'Always On' is enabled."
                                      }
                                    },
                                    "apiDefinition": {
                                      "type": "object",
                                      "properties": {
                                        "url": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The URL of the API definition."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Information about the formal API definition for the app."
                                      }
                                    },
                                    "apiManagementConfig": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. APIM-Api Identifier."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Azure API management settings linked to the app."
                                      }
                                    },
                                    "appCommandLine": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. App command line to launch."
                                      }
                                    },
                                    "appSettings": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Name of the pair."
                                            }
                                          },
                                          "value": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Value of the pair."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application settings."
                                      }
                                    },
                                    "autoHealEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if Auto Heal is enabled."
                                      }
                                    },
                                    "autoHealRules": {
                                      "type": "object",
                                      "properties": {
                                        "actions": {
                                          "type": "object",
                                          "properties": {
                                            "actionType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "CustomAction",
                                                "LogEvent",
                                                "Recycle"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Predefined action to be taken."
                                              }
                                            },
                                            "customAction": {
                                              "type": "object",
                                              "properties": {
                                                "exe": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Executable to be run."
                                                  }
                                                },
                                                "parameters": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Parameters for the executable."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Custom action to be taken."
                                              }
                                            },
                                            "minProcessExecutionTime": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Minimum time the process must execute before taking the action."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Actions to be executed when a rule is triggered."
                                          }
                                        },
                                        "triggers": {
                                          "type": "object",
                                          "properties": {
                                            "privateBytesInKB": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on private bytes."
                                              }
                                            },
                                            "requests": {
                                              "type": "object",
                                              "properties": {
                                                "count": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Request Count."
                                                  }
                                                },
                                                "timeInterval": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Time interval."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on total requests."
                                              }
                                            },
                                            "slowRequests": {
                                              "$ref": "#/definitions/_2.slowRequestBasedTriggerType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on request execution time."
                                              }
                                            },
                                            "slowRequestsWithPath": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/_2.slowRequestBasedTriggerType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                                              }
                                            },
                                            "statusCodes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "count": {
                                                    "type": "int",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Request Count."
                                                    }
                                                  },
                                                  "path": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Request Path."
                                                    }
                                                  },
                                                  "status": {
                                                    "type": "int",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. HTTP status code."
                                                    }
                                                  },
                                                  "subStatus": {
                                                    "type": "int",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Request Sub Status."
                                                    }
                                                  },
                                                  "timeInterval": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Time interval."
                                                    }
                                                  },
                                                  "win32Status": {
                                                    "type": "int",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Win32 error code."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on status codes."
                                              }
                                            },
                                            "statusCodesRange": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "count": {
                                                    "type": "int",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Request Count."
                                                    }
                                                  },
                                                  "path": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Path."
                                                    }
                                                  },
                                                  "statusCodes": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. HTTP status code."
                                                    }
                                                  },
                                                  "timeInterval": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Time interval."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A rule based on status codes ranges."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Auto Heal rules."
                                      }
                                    },
                                    "autoSwapSlotName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Auto-swap slot name."
                                      }
                                    },
                                    "azureStorageAccounts": {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": {
                                        "type": "object",
                                        "properties": {
                                          "accessKey": {
                                            "type": "securestring",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Access key for the storage account."
                                            }
                                          },
                                          "accountName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the storage account."
                                            }
                                          },
                                          "mountPath": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Path to mount the storage within the site's runtime environment."
                                            }
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Http",
                                              "Nfs",
                                              "Smb"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Mounting protocol to use for the storage account."
                                            }
                                          },
                                          "shareName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the file share (container name, for Blob storage)."
                                            }
                                          },
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureBlob",
                                              "AzureFiles"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Type of storage."
                                            }
                                          }
                                        },
                                        "metadata": {
                                          "description": "Required. A storage account configuration."
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. List of Azure Storage Accounts."
                                      }
                                    },
                                    "connectionStrings": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "connectionString": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Connection string value."
                                            }
                                          },
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of connection string."
                                            }
                                          },
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "ApiHub",
                                              "Custom",
                                              "DocDb",
                                              "EventHub",
                                              "MySql",
                                              "NotificationHub",
                                              "PostgreSQL",
                                              "RedisCache",
                                              "SQLAzure",
                                              "SQLServer",
                                              "ServiceBus"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Type of database."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Connection strings."
                                      }
                                    },
                                    "cors": {
                                      "type": "object",
                                      "properties": {
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                                          }
                                        },
                                        "supportCredentials": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                                      }
                                    },
                                    "defaultDocuments": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Default documents."
                                      }
                                    },
                                    "detailedErrorLoggingEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if detailed error logging is enabled."
                                      }
                                    },
                                    "documentRoot": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Document root."
                                      }
                                    },
                                    "elasticWebAppScaleLimit": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                                      }
                                    },
                                    "experiments": {
                                      "type": "object",
                                      "properties": {
                                        "rampUpRules": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "actionHostName": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                                }
                                              },
                                              "changeDecisionCallbackUrl": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                                }
                                              },
                                              "changeIntervalInMinutes": {
                                                "type": "int",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                                }
                                              },
                                              "changeStep": {
                                                "type": "int",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                                }
                                              },
                                              "maxReroutePercentage": {
                                                "type": "int",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                                }
                                              },
                                              "minReroutePercentage": {
                                                "type": "int",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                                }
                                              },
                                              "name": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                                }
                                              },
                                              "reroutePercentage": {
                                                "type": "int",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. List of ramp-up rules."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. This is work around for polymorphic types."
                                      }
                                    },
                                    "ftpsState": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AllAllowed",
                                        "Disabled",
                                        "FtpsOnly"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. State of FTP / FTPS service."
                                      }
                                    },
                                    "functionAppScaleLimit": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                                      }
                                    },
                                    "functionsRuntimeScaleMonitoringEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                                      }
                                    },
                                    "handlerMappings": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "arguments": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Command-line arguments to be passed to the script processor."
                                            }
                                          },
                                          "extension": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                                            }
                                          },
                                          "scriptProcessor": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The absolute path to the FastCGI application."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Handler mappings."
                                      }
                                    },
                                    "healthCheckPath": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Health check path."
                                      }
                                    },
                                    "http20Enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Allow clients to connect over http2.0."
                                      }
                                    },
                                    "httpLoggingEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if HTTP logging is enabled."
                                      }
                                    },
                                    "ipSecurityRestrictions": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. IP security restrictions for main."
                                      }
                                    },
                                    "ipSecurityRestrictionsDefaultAction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Default action for main access restriction if no rules are matched."
                                      }
                                    },
                                    "javaContainer": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Java container."
                                      }
                                    },
                                    "javaContainerVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Java container version."
                                      }
                                    },
                                    "javaVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Java version."
                                      }
                                    },
                                    "keyVaultReferenceIdentity": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Identity to use for Key Vault Reference authentication."
                                      }
                                    },
                                    "limits": {
                                      "type": "object",
                                      "properties": {
                                        "maxDiskSizeInMb": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Maximum allowed disk size usage in MB."
                                          }
                                        },
                                        "maxMemoryInMb": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Maximum allowed memory usage in MB."
                                          }
                                        },
                                        "maxPercentageCpu": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Maximum allowed CPU usage percentage."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Site limits."
                                      }
                                    },
                                    "linuxFxVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Linux App Framework and version."
                                      }
                                    },
                                    "loadBalancing": {
                                      "type": "string",
                                      "allowedValues": [
                                        "LeastRequests",
                                        "LeastRequestsWithTieBreaker",
                                        "LeastResponseTime",
                                        "PerSiteRoundRobin",
                                        "RequestHash",
                                        "WeightedRoundRobin",
                                        "WeightedTotalTraffic"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Site load balancing."
                                      }
                                    },
                                    "localMySqlEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` to enable local MySQL."
                                      }
                                    },
                                    "logsDirectorySizeLimit": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. HTTP logs directory size limit."
                                      }
                                    },
                                    "managedPipelineMode": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Classic",
                                        "Integrated"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Managed pipeline mode."
                                      }
                                    },
                                    "managedServiceIdentityId": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Managed Service Identity Id."
                                      }
                                    },
                                    "metadata": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Pair name."
                                            }
                                          },
                                          "value": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Pair Value."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                                      }
                                    },
                                    "minimumElasticInstanceCount": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 0,
                                      "maxValue": 20,
                                      "metadata": {
                                        "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                                      }
                                    },
                                    "minTlsCipherSuite": {
                                      "type": "string",
                                      "allowedValues": [
                                        "TLS_AES_128_GCM_SHA256",
                                        "TLS_AES_256_GCM_SHA384",
                                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                                      }
                                    },
                                    "minTlsVersion": {
                                      "type": "string",
                                      "allowedValues": [
                                        "1.0",
                                        "1.1",
                                        "1.2",
                                        "1.3"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                                      }
                                    },
                                    "netFrameworkVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. .NET Framework version."
                                      }
                                    },
                                    "nodeVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Version of Node.js."
                                      }
                                    },
                                    "numberOfWorkers": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Number of workers."
                                      }
                                    },
                                    "phpVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Version of PHP."
                                      }
                                    },
                                    "powerShellVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Version of PowerShell."
                                      }
                                    },
                                    "preWarmedInstanceCount": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 0,
                                      "maxValue": 10,
                                      "metadata": {
                                        "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                                      }
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Property to allow or block all public traffic."
                                      }
                                    },
                                    "publishingUsername": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Publishing user name."
                                      }
                                    },
                                    "push": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Kind of resource."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "dynamicTagsJson": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                              }
                                            },
                                            "isPushEnabled": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                              }
                                            },
                                            "tagsRequiringAuth": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                              }
                                            },
                                            "tagWhitelistJson": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. PushSettings resource specific properties."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Push endpoint settings."
                                      }
                                    },
                                    "pythonVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Version of Python."
                                      }
                                    },
                                    "remoteDebuggingEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if remote debugging is enabled."
                                      }
                                    },
                                    "remoteDebuggingVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Remote debugging version."
                                      }
                                    },
                                    "requestTracingEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if request tracing is enabled."
                                      }
                                    },
                                    "requestTracingExpirationTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Request tracing expiration time."
                                      }
                                    },
                                    "scmIpSecurityRestrictions": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. IP security restrictions for scm."
                                      }
                                    },
                                    "scmIpSecurityRestrictionsDefaultAction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Default action for scm access restriction if no rules are matched."
                                      }
                                    },
                                    "scmIpSecurityRestrictionsUseMain": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. IP security restrictions for scm to use main."
                                      }
                                    },
                                    "scmMinTlsVersion": {
                                      "type": "string",
                                      "allowedValues": [
                                        "1.0",
                                        "1.1",
                                        "1.2",
                                        "1.3"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                                      }
                                    },
                                    "scmType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "BitbucketGit",
                                        "BitbucketHg",
                                        "CodePlexGit",
                                        "CodePlexHg",
                                        "Dropbox",
                                        "ExternalGit",
                                        "ExternalHg",
                                        "GitHub",
                                        "LocalGit",
                                        "None",
                                        "OneDrive",
                                        "Tfs",
                                        "VSO",
                                        "VSTSRM"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. SCM type."
                                      }
                                    },
                                    "tracingOptions": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tracing options."
                                      }
                                    },
                                    "use32BitWorkerProcess": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` to use 32-bit worker process."
                                      }
                                    },
                                    "virtualApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "physicalPath": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Physical path."
                                            }
                                          },
                                          "preloadEnabled": {
                                            "type": "bool",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Set to `true` if preloading is enabled."
                                            }
                                          },
                                          "virtualDirectories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "physicalPath": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Physical path."
                                                  }
                                                },
                                                "virtualPath": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Path to virtual application."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Virtual directories for virtual application."
                                            }
                                          },
                                          "virtualPath": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Virtual path."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Virtual applications."
                                      }
                                    },
                                    "vnetName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Virtual Network name."
                                      }
                                    },
                                    "vnetPrivatePortsCount": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                                      }
                                    },
                                    "vnetRouteAllEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                                      }
                                    },
                                    "websiteTimeZone": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                                      }
                                    },
                                    "webSocketsEnabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set to `true` if WebSocket is enabled."
                                      }
                                    },
                                    "windowsFxVersion": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Xenon App Framework and version."
                                      }
                                    },
                                    "xManagedServiceIdentityId": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Explicit Managed Service Identity Id."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The config settings."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a web configuration.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "slot/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the site."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "serverFarmResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the app service plan to use for the site. Set as empty string when using a managed environment id for container apps."
                              }
                            },
                            "managedEnvironmentResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                              }
                            },
                            "httpsOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
                              }
                            },
                            "clientAffinityEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If client affinity is enabled."
                              }
                            },
                            "clientAffinityProxyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
                              }
                            },
                            "clientAffinityPartitioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
                              }
                            },
                            "appServiceEnvironmentResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service environment to use for this resource."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "keyVaultAccessIdentityResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                              }
                            },
                            "storageAccountRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Checks if Customer provided storage account is required."
                              }
                            },
                            "virtualNetworkSubnetResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                              }
                            },
                            "scmSiteAlsoStopped": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
                              }
                            },
                            "siteConfig": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/siteConfig"
                                },
                                "description": "Optional. The site config object. The defaults are set to the following values: alwaysOn: true, minTlsVersion: '1.2', ftpsState: 'FtpsOnly'."
                              },
                              "defaultValue": {
                                "alwaysOn": true,
                                "minTlsVersion": "1.2",
                                "ftpsState": "FtpsOnly"
                              }
                            },
                            "outboundVnetRouting": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-11-01#properties/properties/properties/outboundVnetRouting"
                                },
                                "description": "Optional. The outbound VNET routing configuration for the site."
                              },
                              "nullable": true
                            },
                            "configs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/configType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The web site config."
                              }
                            },
                            "functionAppConfig": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/functionAppConfig"
                                },
                                "description": "Optional. The Function App configuration object."
                              },
                              "nullable": true
                            },
                            "extensions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/extensionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The extensions configuration."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointSingleServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "slots": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/slotType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration for deployment slots for an app."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-11-01#properties/tags"
                                },
                                "description": "Optional. Tags of the resource."
                              },
                              "nullable": true
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "clientCertEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                              }
                            },
                            "clientCertExclusionPaths": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                              }
                            },
                            "clientCertMode": {
                              "type": "string",
                              "defaultValue": "Optional",
                              "allowedValues": [
                                "Optional",
                                "OptionalInteractiveUser",
                                "Required"
                              ],
                              "metadata": {
                                "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
                              }
                            },
                            "cloningInfo": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/cloningInfo"
                                },
                                "description": "Optional. If specified during app creation, the app is cloned from a source app."
                              },
                              "nullable": true
                            },
                            "containerSize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Size of the function container."
                              }
                            },
                            "dailyMemoryTimeQuota": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                              }
                            },
                            "hostNameSslStates": {
                              "type": "array",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/hostNameSslStates"
                                },
                                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                              },
                              "nullable": true
                            },
                            "hyperV": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Hyper-V sandbox."
                              }
                            },
                            "redundancyMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "ActiveActive",
                                "Failover",
                                "GeoRedundant",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Site redundancy mode."
                              }
                            },
                            "basicPublishingCredentialsPolicies": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The site publishing credential policy names which are associated with the sites."
                              }
                            },
                            "hybridConnectionRelays": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/hybridConnectionRelayType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Names of hybrid connection relays to connect app with."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                              }
                            },
                            "e2eEncryptionEnabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. End to End Encryption Setting."
                              }
                            },
                            "dnsConfiguration": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/dnsConfiguration"
                                },
                                "description": "Optional. Property to configure various DNS related settings for a site."
                              },
                              "nullable": true
                            },
                            "autoGeneratedDomainNameLabelScope": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "managedEnvironmentSupportedKinds": [
                              "functionapp,linux,container,azurecontainerapps"
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.19.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "app": {
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                                "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), null(), parameters('serverFarmResourceId'))]",
                                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                                "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                                "httpsOnly": "[parameters('httpsOnly')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                                "siteConfig": "[parameters('siteConfig')]",
                                "functionAppConfig": "[parameters('functionAppConfig')]",
                                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                "clientCertMode": "[parameters('clientCertMode')]",
                                "cloningInfo": "[parameters('cloningInfo')]",
                                "containerSize": "[parameters('containerSize')]",
                                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                "enabled": "[parameters('enabled')]",
                                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                "hyperV": "[parameters('hyperV')]",
                                "redundancyMode": "[parameters('redundancyMode')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                                "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]",
                                "endToEndEncryptionEnabled": "[parameters('e2eEncryptionEnabled')]",
                                "dnsConfiguration": "[parameters('dnsConfiguration')]",
                                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                                "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
                              }
                            },
                            "app_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_diagnosticSettings": {
                              "copy": {
                                "name": "app_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_roleAssignments": {
                              "copy": {
                                "name": "app_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_config": {
                              "copy": {
                                "name": "app_config",
                                "count": "[length(coalesce(parameters('configs'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                                  },
                                  "applicationInsightResourceId": {
                                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                                  },
                                  "storageAccountUseIdentityAuthentication": {
                                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                                  },
                                  "properties": {
                                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                                  },
                                  "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "7361696555743372541"
                                    },
                                    "name": "Site App Settings",
                                    "description": "This module deploys a Site App Setting."
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "appsettings",
                                        "authsettings",
                                        "authsettingsV2",
                                        "azurestorageaccounts",
                                        "backup",
                                        "connectionstrings",
                                        "logs",
                                        "metadata",
                                        "pushsettings",
                                        "slotConfigNames",
                                        "web"
                                      ],
                                      "metadata": {
                                        "description": "Required. The name of the config."
                                      }
                                    },
                                    "properties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                                      }
                                    },
                                    "storageAccountUseIdentityAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "applicationInsightResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the application insight to leverage for this resource."
                                      }
                                    },
                                    "currentAppSettings": {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The key-values pairs of the current app settings."
                                        }
                                      },
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The current app settings."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "applicationInsights": {
                                      "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                                      "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                                      "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                                    },
                                    "storageAccount": {
                                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2025-01-01",
                                      "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                                      "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                    },
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2023-12-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "config": {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2024-04-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                                      "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                                      "dependsOn": [
                                        "applicationInsights",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_extensions": {
                              "copy": {
                                "name": "app_extensions",
                                "count": "[length(coalesce(parameters('extensions'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Extension-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "properties": {
                                    "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "7306399349682118782"
                                    },
                                    "name": "Site Deployment Extension ",
                                    "description": "This module deploys a Site extension for MSDeploy."
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "MSDeploy",
                                      "allowedValues": [
                                        "MSDeploy"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of the extension."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "MSDeploy",
                                      "allowedValues": [
                                        "MSDeploy"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The kind of extension."
                                      }
                                    },
                                    "properties": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                                        },
                                        "description": "Optional. Sets the properties."
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2024-04-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "msdeploy": {
                                      "type": "Microsoft.Web/sites/extensions",
                                      "apiVersion": "2024-04-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[parameters('properties')]"
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the extension was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_slots": {
                              "copy": {
                                "name": "app_slots",
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                                  },
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "serverFarmResourceId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), not(empty(parameters('managedEnvironmentResourceId')))), createObject('value', null()), createObject('value', parameters('serverFarmResourceId')))]",
                                  "managedEnvironmentResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedEnvironmentResourceId'), parameters('managedEnvironmentResourceId'))]"
                                  },
                                  "httpsOnly": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                                  },
                                  "appServiceEnvironmentResourceId": {
                                    "value": "[parameters('appServiceEnvironmentResourceId')]"
                                  },
                                  "clientAffinityEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                                  },
                                  "managedIdentities": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                                  },
                                  "keyVaultAccessIdentityResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                                  },
                                  "storageAccountRequired": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                                  },
                                  "virtualNetworkSubnetResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetResourceId'), parameters('virtualNetworkSubnetResourceId'))]"
                                  },
                                  "siteConfig": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                                  },
                                  "functionAppConfig": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'functionAppConfig'), parameters('functionAppConfig'))]"
                                  },
                                  "configs": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'configs'), parameters('configs'))]"
                                  },
                                  "extensions": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'extensions'), parameters('extensions'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "basicPublishingCredentialsPolicies": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateEndpoints": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "clientCertEnabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                                  },
                                  "clientCertExclusionPaths": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                                  },
                                  "clientCertMode": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                                  },
                                  "cloningInfo": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                                  },
                                  "containerSize": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                                  },
                                  "customDomainVerificationId": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                                  },
                                  "dailyMemoryTimeQuota": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                                  },
                                  "enabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                                  },
                                  "hostNameSslStates": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                                  },
                                  "hyperV": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                                  },
                                  "publicNetworkAccess": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                                  },
                                  "redundancyMode": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                                  },
                                  "hybridConnectionRelays": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                                  },
                                  "dnsConfiguration": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dnsConfiguration')]"
                                  },
                                  "autoGeneratedDomainNameLabelScope": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
                                  },
                                  "outboundVnetRouting": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'outboundVnetRouting')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "2467503612762973649"
                                    },
                                    "name": "Web/Function App Deployment Slots",
                                    "description": "This module deploys a Web or Function App Deployment Slot."
                                  },
                                  "definitions": {
                                    "privateEndpointOutputType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The name of the private endpoint."
                                          }
                                        },
                                        "resourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The resource ID of the private endpoint."
                                          }
                                        },
                                        "groupId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "The group Id for the private endpoint Group."
                                          }
                                        },
                                        "customDnsConfigs": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "fqdn": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "FQDN that resolves to private endpoint IP address."
                                                }
                                              },
                                              "ipAddresses": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "A list of private IP addresses of the private endpoint."
                                                }
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "The custom DNS configurations of the private endpoint."
                                          }
                                        },
                                        "networkInterfaceResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "The IDs of the network interfaces associated with the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "configType": {
                                      "type": "object",
                                      "discriminator": {
                                        "propertyName": "name",
                                        "mapping": {
                                          "appsettings": {
                                            "$ref": "#/definitions/appSettingsConfigType"
                                          },
                                          "authsettings": {
                                            "$ref": "#/definitions/authSettingsConfigType"
                                          },
                                          "authsettingsV2": {
                                            "$ref": "#/definitions/authSettingsV2ConfigType"
                                          },
                                          "azurestorageaccounts": {
                                            "$ref": "#/definitions/azureStorageAccountConfigType"
                                          },
                                          "backup": {
                                            "$ref": "#/definitions/backupConfigType"
                                          },
                                          "connectionstrings": {
                                            "$ref": "#/definitions/connectionStringsConfigType"
                                          },
                                          "logs": {
                                            "$ref": "#/definitions/logsConfigType"
                                          },
                                          "metadata": {
                                            "$ref": "#/definitions/metadataConfigType"
                                          },
                                          "pushsettings": {
                                            "$ref": "#/definitions/pushSettingsConfigType"
                                          },
                                          "web": {
                                            "$ref": "#/definitions/webConfigType"
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a site configuration."
                                      }
                                    },
                                    "appSettingsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "appsettings"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "storageAccountUseIdentityAuthentication": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                          }
                                        },
                                        "applicationInsightResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the application insight to leverage for this resource."
                                          }
                                        },
                                        "retainCurrentAppSettings": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The retain the current app settings. Defaults to true."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. An app settings key-value pair."
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of an app settings configuration."
                                      }
                                    },
                                    "authSettingsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "authsettings"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "aadClaimsAuthorization": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                                              }
                                            },
                                            "additionalLoginParams": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                              }
                                            },
                                            "allowedAudiences": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                                              }
                                            },
                                            "allowedExternalRedirectUrls": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                              }
                                            },
                                            "authFilePath": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                                              }
                                            },
                                            "clientId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                              }
                                            },
                                            "clientSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                              }
                                            },
                                            "clientSecretCertificateThumbprint": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                              }
                                            },
                                            "clientSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                              }
                                            },
                                            "configVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                                              }
                                            },
                                            "defaultProvider": {
                                              "type": "string",
                                              "allowedValues": [
                                                "AzureActiveDirectory",
                                                "Facebook",
                                                "Github",
                                                "Google",
                                                "MicrosoftAccount",
                                                "Twitter"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                              }
                                            },
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                              }
                                            },
                                            "facebookAppId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                              }
                                            },
                                            "facebookAppSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                              }
                                            },
                                            "facebookAppSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                                              }
                                            },
                                            "facebookOAuthScopes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                                              }
                                            },
                                            "gitHubClientId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                                              }
                                            },
                                            "gitHubClientSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                                              }
                                            },
                                            "gitHubClientSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                                              }
                                            },
                                            "gitHubOAuthScopes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                                              }
                                            },
                                            "googleClientId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                              }
                                            },
                                            "googleClientSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                              }
                                            },
                                            "googleClientSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                                              }
                                            },
                                            "googleOAuthScopes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                                              }
                                            },
                                            "isAuthFromFile": {
                                              "type": "string",
                                              "allowedValues": [
                                                "false",
                                                "true"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                                              }
                                            },
                                            "issuer": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                              }
                                            },
                                            "microsoftAccountClientId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                                              }
                                            },
                                            "microsoftAccountClientSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                                              }
                                            },
                                            "microsoftAccountClientSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                                              }
                                            },
                                            "microsoftAccountOAuthScopes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                                              }
                                            },
                                            "runtimeVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                              }
                                            },
                                            "tokenRefreshExtensionHours": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                              }
                                            },
                                            "tokenStoreEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                                              }
                                            },
                                            "twitterConsumerKey": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                              }
                                            },
                                            "twitterConsumerSecret": {
                                              "type": "securestring",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                              }
                                            },
                                            "twitterConsumerSecretSettingName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                              }
                                            },
                                            "unauthenticatedClientAction": {
                                              "type": "string",
                                              "allowedValues": [
                                                "AllowAnonymous",
                                                "RedirectToLoginPage"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                              }
                                            },
                                            "validateIssuer": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of an auth settings configuration."
                                      }
                                    },
                                    "authSettingsV2ConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "authsettingsV2"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "globalValidation": {
                                              "type": "object",
                                              "properties": {
                                                "excludedPaths": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                                                  }
                                                },
                                                "redirectToProvider": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                                                  }
                                                },
                                                "requireAuthentication": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `true` if the authentication flow is required by every request."
                                                  }
                                                },
                                                "unauthenticatedClientAction": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "AllowAnonymous",
                                                    "RedirectToLoginPage",
                                                    "Return401",
                                                    "Return403"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                                              }
                                            },
                                            "httpSettings": {
                                              "type": "object",
                                              "properties": {
                                                "forwardProxy": {
                                                  "type": "object",
                                                  "properties": {
                                                    "convention": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Custom",
                                                        "NoProxy",
                                                        "Standard"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The convention used to determine the url of the request made."
                                                      }
                                                    },
                                                    "customHostHeaderName": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The name of the header containing the host of the request."
                                                      }
                                                    },
                                                    "customProtoHeaderName": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The name of the header containing the scheme of the request."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                                                  }
                                                },
                                                "requireHttps": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                                                  }
                                                },
                                                "routes": {
                                                  "type": "object",
                                                  "properties": {
                                                    "apiPrefix": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the paths HTTP requests."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                                              }
                                            },
                                            "identityProviders": {
                                              "type": "object",
                                              "properties": {
                                                "apple": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "scopes": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of the app used for login."
                                                          }
                                                        },
                                                        "clientSecretSettingName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The app setting name that contains the client secret."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Apple registration."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Apple provider."
                                                  }
                                                },
                                                "azureActiveDirectory": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "isAutoProvisioned": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "disableWWWAuthenticate": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                                          }
                                                        },
                                                        "loginParameters": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                                          }
                                                        },
                                                        "clientSecretCertificateIssuer": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                                          }
                                                        },
                                                        "clientSecretCertificateSubjectAlternativeName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                                          }
                                                        },
                                                        "clientSecretCertificateThumbprint": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                                          }
                                                        },
                                                        "clientSecretSettingName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                                          }
                                                        },
                                                        "openIdIssuer": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                                                      }
                                                    },
                                                    "validation": {
                                                      "type": "object",
                                                      "properties": {
                                                        "allowedAudiences": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                                          }
                                                        },
                                                        "defaultAuthorizationPolicy": {
                                                          "type": "object",
                                                          "properties": {
                                                            "allowedApplications": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              },
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                                              }
                                                            },
                                                            "allowedPrincipals": {
                                                              "type": "object",
                                                              "properties": {
                                                                "groups": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  },
                                                                  "nullable": true,
                                                                  "metadata": {
                                                                    "description": "Optional. The list of the allowed groups."
                                                                  }
                                                                },
                                                                "identities": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  },
                                                                  "nullable": true,
                                                                  "metadata": {
                                                                    "description": "Optional. The list of the allowed identities."
                                                                  }
                                                                }
                                                              },
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The configuration settings of the default authorization policy."
                                                          }
                                                        },
                                                        "jwtClaimChecks": {
                                                          "type": "object",
                                                          "properties": {
                                                            "allowedClientApplications": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              },
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The list of the allowed client applications."
                                                              }
                                                            },
                                                            "allowedGroups": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              },
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The list of the allowed groups."
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Azure Active directory provider."
                                                  }
                                                },
                                                "azureStaticWebApps": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of the app used for login."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                                                  }
                                                },
                                                "customOpenIdConnectProviders": {
                                                  "type": "object",
                                                  "properties": {},
                                                  "additionalProperties": {
                                                    "type": "object",
                                                    "properties": {
                                                      "enabled": {
                                                        "type": "bool",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                                        }
                                                      },
                                                      "login": {
                                                        "type": "object",
                                                        "properties": {
                                                          "nameClaimType": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The name of the claim that contains the users name."
                                                            }
                                                          },
                                                          "scopes": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                            }
                                                          }
                                                        },
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                                        }
                                                      },
                                                      "registration": {
                                                        "type": "object",
                                                        "properties": {
                                                          "clientCredential": {
                                                            "type": "object",
                                                            "properties": {
                                                              "clientSecretSettingName": {
                                                                "type": "string",
                                                                "metadata": {
                                                                  "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                                                }
                                                              },
                                                              "method": {
                                                                "type": "string",
                                                                "allowedValues": [
                                                                  "ClientSecretPost"
                                                                ],
                                                                "metadata": {
                                                                  "description": "Required. The method that should be used to authenticate the user."
                                                                }
                                                              }
                                                            },
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                                            }
                                                          },
                                                          "clientId": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The client id of the custom Open ID Connect provider."
                                                            }
                                                          },
                                                          "openIdConnectConfiguration": {
                                                            "type": "object",
                                                            "properties": {
                                                              "authorizationEndpoint": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. The endpoint to be used to make an authorization request."
                                                                }
                                                              },
                                                              "certificationUri": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                                                }
                                                              },
                                                              "issuer": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. The endpoint that issues the token."
                                                                }
                                                              },
                                                              "tokenEndpoint": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. The endpoint to be used to request a token."
                                                                }
                                                              },
                                                              "wellKnownOpenIdConfiguration": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                                                }
                                                              }
                                                            },
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                                            }
                                                          }
                                                        },
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The alias of each custom Open ID Connect provider."
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                                                  }
                                                },
                                                "facebook": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "graphApiVersion": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The version of the Facebook api to be used while logging in."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "scopes": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "appId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The App ID of the app used for login."
                                                          }
                                                        },
                                                        "appSecretSettingName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The app setting name that contains the app secret."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Facebook provider."
                                                  }
                                                },
                                                "gitHub": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "scopes": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of the app used for login."
                                                          }
                                                        },
                                                        "clientSecretSettingName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The app setting name that contains the client secret."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the GitHub provider."
                                                  }
                                                },
                                                "google": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "scopes": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of the app used for login."
                                                          }
                                                        },
                                                        "clientSecretSettingName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The app setting name that contains the client secret."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the app registration for the Google provider."
                                                      }
                                                    },
                                                    "validation": {
                                                      "type": "object",
                                                      "properties": {
                                                        "allowedAudiences": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Google provider."
                                                  }
                                                },
                                                "legacyMicrosoftAccount": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "login": {
                                                      "type": "object",
                                                      "properties": {
                                                        "scopes": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the login flow."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "clientId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The Client ID of the app used for login."
                                                          }
                                                        },
                                                        "clientSecretSettingName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The app setting name that contains the client secret."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                                                      }
                                                    },
                                                    "validation": {
                                                      "type": "object",
                                                      "properties": {
                                                        "allowedAudiences": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                                                  }
                                                },
                                                "twitter": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                                                      }
                                                    },
                                                    "registration": {
                                                      "type": "object",
                                                      "properties": {
                                                        "consumerKey": {
                                                          "type": "securestring",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                                          }
                                                        },
                                                        "consumerSecretSettingName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the Twitter provider."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                                              }
                                            },
                                            "login": {
                                              "type": "object",
                                              "properties": {
                                                "allowedExternalRedirectUrls": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                                                  }
                                                },
                                                "cookieExpiration": {
                                                  "type": "object",
                                                  "properties": {
                                                    "convention": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "FixedTime",
                                                        "IdentityProviderDerived"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The convention used when determining the session cookie's expiration."
                                                      }
                                                    },
                                                    "timeToExpiration": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The time after the request is made when the session cookie should expire."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the session cookie's expiration."
                                                  }
                                                },
                                                "nonce": {
                                                  "type": "object",
                                                  "properties": {
                                                    "nonceExpirationInterval": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The time after the request is made when the nonce should expire."
                                                      }
                                                    },
                                                    "validateNonce": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the nonce used in the login flow."
                                                  }
                                                },
                                                "preserveUrlFragmentsForLogins": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                                                  }
                                                },
                                                "routes": {
                                                  "type": "object",
                                                  "properties": {
                                                    "logoutEndpoint": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The endpoint at which a logout request should be made."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                                                  }
                                                },
                                                "tokenStore": {
                                                  "type": "object",
                                                  "properties": {
                                                    "azureBlobStorage": {
                                                      "type": "object",
                                                      "properties": {
                                                        "sasUrlSettingName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                                                      }
                                                    },
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                                                      }
                                                    },
                                                    "fileSystem": {
                                                      "type": "object",
                                                      "properties": {
                                                        "directory": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The directory in which the tokens will be stored."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                                                      }
                                                    },
                                                    "tokenRefreshExtensionHours": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The configuration settings of the token store."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                                              }
                                            },
                                            "platform": {
                                              "type": "object",
                                              "properties": {
                                                "configFilePath": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                                                  }
                                                },
                                                "runtimeVersion": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of an authSettingsV2 configuration."
                                      }
                                    },
                                    "azureStorageAccountConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "azurestorageaccounts"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                              "accessKey": {
                                                "type": "securestring",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Access key for the storage account."
                                                }
                                              },
                                              "accountName": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of the storage account."
                                                }
                                              },
                                              "mountPath": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Path to mount the storage within the site's runtime environment."
                                                }
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "allowedValues": [
                                                  "Http",
                                                  "Nfs",
                                                  "Smb"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Mounting protocol to use for the storage account."
                                                }
                                              },
                                              "shareName": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of the file share (container name, for Blob storage)."
                                                }
                                              },
                                              "type": {
                                                "type": "string",
                                                "allowedValues": [
                                                  "AzureBlob",
                                                  "AzureFiles"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Type of storage."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Azure Storage Info configuration."
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of an Azure Storage Account configuration."
                                      }
                                    },
                                    "backupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "backup"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "backupName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Name of the backup."
                                              }
                                            },
                                            "backupSchedule": {
                                              "type": "object",
                                              "properties": {
                                                "frequencyInterval": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                                                  }
                                                },
                                                "frequencyUnit": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Day",
                                                    "Hour"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                                                  }
                                                },
                                                "keepAtLeastOneBackup": {
                                                  "type": "bool",
                                                  "metadata": {
                                                    "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                                                  }
                                                },
                                                "retentionPeriodInDays": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. After how many days backups should be deleted."
                                                  }
                                                },
                                                "startTime": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. When the schedule should start working."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Schedule for the backup if it is executed periodically."
                                              }
                                            },
                                            "databases": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "connectionString": {
                                                    "type": "securestring",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                                                    }
                                                  },
                                                  "connectionStringName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                                                    }
                                                  },
                                                  "databaseType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "LocalMySql",
                                                      "MySql",
                                                      "PostgreSql",
                                                      "SqlAzure"
                                                    ],
                                                    "metadata": {
                                                      "description": "Required. Database type (e.g. SqlAzure / MySql)."
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of the setting."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Databases included in the backup."
                                              }
                                            },
                                            "enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                                              }
                                            },
                                            "storageAccountUrl": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. SAS URL to the container."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a backup configuration."
                                      }
                                    },
                                    "connectionStringsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "connectionstrings"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "allowedValues": [
                                                  "ApiHub",
                                                  "Custom",
                                                  "DocDb",
                                                  "EventHub",
                                                  "MySql",
                                                  "NotificationHub",
                                                  "PostgreSQL",
                                                  "RedisCache",
                                                  "SQLAzure",
                                                  "SQLServer",
                                                  "ServiceBus"
                                                ],
                                                "metadata": {
                                                  "description": "Required. Type of database."
                                                }
                                              },
                                              "value": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Value of pair."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the connection string setting."
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a connection string configuration."
                                      }
                                    },
                                    "logsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "logs"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "applicationLogs": {
                                              "type": "object",
                                              "properties": {
                                                "azureBlobStorage": {
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Error",
                                                        "Information",
                                                        "Off",
                                                        "Verbose",
                                                        "Warning"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Log level."
                                                      }
                                                    },
                                                    "retentionInDays": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                                      }
                                                    },
                                                    "sasUrl": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Application logs to blob storage configuration."
                                                  }
                                                },
                                                "azureTableStorage": {
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Error",
                                                        "Information",
                                                        "Off",
                                                        "Verbose",
                                                        "Warning"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Log level."
                                                      }
                                                    },
                                                    "sasUrl": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Application logs to azure table storage configuration."
                                                  }
                                                },
                                                "fileSystem": {
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Error",
                                                        "Information",
                                                        "Off",
                                                        "Verbose",
                                                        "Warning"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Log level."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Application logs to file system configuration."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Application Logs for Azure configuration."
                                              }
                                            },
                                            "detailedErrorMessages": {
                                              "type": "object",
                                              "properties": {
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Detailed error messages configuration."
                                              }
                                            },
                                            "failedRequestsTracing": {
                                              "type": "object",
                                              "properties": {
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Failed requests tracing configuration."
                                              }
                                            },
                                            "httpLogs": {
                                              "type": "object",
                                              "properties": {
                                                "azureBlobStorage": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                                      }
                                                    },
                                                    "retentionInDays": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                                                      }
                                                    },
                                                    "sasUrl": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Http logs to azure blob storage configuration."
                                                  }
                                                },
                                                "fileSystem": {
                                                  "type": "object",
                                                  "properties": {
                                                    "enabled": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                                                      }
                                                    },
                                                    "retentionInDays": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                                                      }
                                                    },
                                                    "retentionInMb": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "minValue": 25,
                                                      "maxValue": 100,
                                                      "metadata": {
                                                        "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Http logs to file system configuration."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. HTTP logs configuration."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a logs configuration."
                                      }
                                    },
                                    "metadataConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "metadata"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata key value pair."
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a metadata configuration."
                                      }
                                    },
                                    "pushSettingsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "pushsettings"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "dynamicTagsJson": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                              }
                                            },
                                            "isPushEnabled": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                              }
                                            },
                                            "tagsRequiringAuth": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                              }
                                            },
                                            "tagWhitelistJson": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a pushSettings configuration."
                                      }
                                    },
                                    "webConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "web"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of config."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "acrUseManagedIdentityCreds": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                                              }
                                            },
                                            "acrUserManagedIdentityID": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. If using user managed identity, the user managed identity ClientId."
                                              }
                                            },
                                            "alwaysOn": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if 'Always On' is enabled."
                                              }
                                            },
                                            "apiDefinition": {
                                              "type": "object",
                                              "properties": {
                                                "url": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The URL of the API definition."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Information about the formal API definition for the app."
                                              }
                                            },
                                            "apiManagementConfig": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. APIM-Api Identifier."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Azure API management settings linked to the app."
                                              }
                                            },
                                            "appCommandLine": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. App command line to launch."
                                              }
                                            },
                                            "appSettings": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. Name of the pair."
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. Value of the pair."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Application settings."
                                              }
                                            },
                                            "autoHealEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if Auto Heal is enabled."
                                              }
                                            },
                                            "autoHealRules": {
                                              "type": "object",
                                              "properties": {
                                                "actions": {
                                                  "type": "object",
                                                  "properties": {
                                                    "actionType": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "CustomAction",
                                                        "LogEvent",
                                                        "Recycle"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Predefined action to be taken."
                                                      }
                                                    },
                                                    "customAction": {
                                                      "type": "object",
                                                      "properties": {
                                                        "exe": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Executable to be run."
                                                          }
                                                        },
                                                        "parameters": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Parameters for the executable."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Custom action to be taken."
                                                      }
                                                    },
                                                    "minProcessExecutionTime": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Minimum time the process must execute before taking the action."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Actions to be executed when a rule is triggered."
                                                  }
                                                },
                                                "triggers": {
                                                  "type": "object",
                                                  "properties": {
                                                    "privateBytesInKB": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on private bytes."
                                                      }
                                                    },
                                                    "requests": {
                                                      "type": "object",
                                                      "properties": {
                                                        "count": {
                                                          "type": "int",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Request Count."
                                                          }
                                                        },
                                                        "timeInterval": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Time interval."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on total requests."
                                                      }
                                                    },
                                                    "slowRequests": {
                                                      "$ref": "#/definitions/slowRequestBasedTriggerType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on request execution time."
                                                      }
                                                    },
                                                    "slowRequestsWithPath": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/slowRequestBasedTriggerType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                                                      }
                                                    },
                                                    "statusCodes": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "count": {
                                                            "type": "int",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Request Count."
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Request Path."
                                                            }
                                                          },
                                                          "status": {
                                                            "type": "int",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. HTTP status code."
                                                            }
                                                          },
                                                          "subStatus": {
                                                            "type": "int",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Request Sub Status."
                                                            }
                                                          },
                                                          "timeInterval": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Time interval."
                                                            }
                                                          },
                                                          "win32Status": {
                                                            "type": "int",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Win32 error code."
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on status codes."
                                                      }
                                                    },
                                                    "statusCodesRange": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "count": {
                                                            "type": "int",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Request Count."
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Path."
                                                            }
                                                          },
                                                          "statusCodes": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. HTTP status code."
                                                            }
                                                          },
                                                          "timeInterval": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Time interval."
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A rule based on status codes ranges."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Auto Heal rules."
                                              }
                                            },
                                            "autoSwapSlotName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Auto-swap slot name."
                                              }
                                            },
                                            "azureStorageAccounts": {
                                              "type": "object",
                                              "properties": {},
                                              "additionalProperties": {
                                                "type": "object",
                                                "properties": {
                                                  "accessKey": {
                                                    "type": "securestring",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Access key for the storage account."
                                                    }
                                                  },
                                                  "accountName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the storage account."
                                                    }
                                                  },
                                                  "mountPath": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Path to mount the storage within the site's runtime environment."
                                                    }
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Http",
                                                      "Nfs",
                                                      "Smb"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Mounting protocol to use for the storage account."
                                                    }
                                                  },
                                                  "shareName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the file share (container name, for Blob storage)."
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureBlob",
                                                      "AzureFiles"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Type of storage."
                                                    }
                                                  }
                                                },
                                                "metadata": {
                                                  "description": "Required. A storage account configuration."
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. List of Azure Storage Accounts."
                                              }
                                            },
                                            "connectionStrings": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "connectionString": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Connection string value."
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of connection string."
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "ApiHub",
                                                      "Custom",
                                                      "DocDb",
                                                      "EventHub",
                                                      "MySql",
                                                      "NotificationHub",
                                                      "PostgreSQL",
                                                      "RedisCache",
                                                      "SQLAzure",
                                                      "SQLServer",
                                                      "ServiceBus"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Type of database."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Connection strings."
                                              }
                                            },
                                            "cors": {
                                              "type": "object",
                                              "properties": {
                                                "allowedOrigins": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                                                  }
                                                },
                                                "supportCredentials": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                                              }
                                            },
                                            "defaultDocuments": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Default documents."
                                              }
                                            },
                                            "detailedErrorLoggingEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if detailed error logging is enabled."
                                              }
                                            },
                                            "documentRoot": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Document root."
                                              }
                                            },
                                            "elasticWebAppScaleLimit": {
                                              "type": "int",
                                              "nullable": true,
                                              "minValue": 0,
                                              "metadata": {
                                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                                              }
                                            },
                                            "experiments": {
                                              "type": "object",
                                              "properties": {
                                                "rampUpRules": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "actionHostName": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                                        }
                                                      },
                                                      "changeDecisionCallbackUrl": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                                        }
                                                      },
                                                      "changeIntervalInMinutes": {
                                                        "type": "int",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                                        }
                                                      },
                                                      "changeStep": {
                                                        "type": "int",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                                        }
                                                      },
                                                      "maxReroutePercentage": {
                                                        "type": "int",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                                        }
                                                      },
                                                      "minReroutePercentage": {
                                                        "type": "int",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                                        }
                                                      },
                                                      "name": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                                        }
                                                      },
                                                      "reroutePercentage": {
                                                        "type": "int",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. List of ramp-up rules."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. This is work around for polymorphic types."
                                              }
                                            },
                                            "ftpsState": {
                                              "type": "string",
                                              "allowedValues": [
                                                "AllAllowed",
                                                "Disabled",
                                                "FtpsOnly"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. State of FTP / FTPS service."
                                              }
                                            },
                                            "functionAppScaleLimit": {
                                              "type": "int",
                                              "nullable": true,
                                              "minValue": 0,
                                              "metadata": {
                                                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                                              }
                                            },
                                            "functionsRuntimeScaleMonitoringEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                                              }
                                            },
                                            "handlerMappings": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "arguments": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Command-line arguments to be passed to the script processor."
                                                    }
                                                  },
                                                  "extension": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                                                    }
                                                  },
                                                  "scriptProcessor": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The absolute path to the FastCGI application."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Handler mappings."
                                              }
                                            },
                                            "healthCheckPath": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Health check path."
                                              }
                                            },
                                            "http20Enabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Allow clients to connect over http2.0."
                                              }
                                            },
                                            "httpLoggingEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if HTTP logging is enabled."
                                              }
                                            },
                                            "ipSecurityRestrictions": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. IP security restrictions for main."
                                              }
                                            },
                                            "ipSecurityRestrictionsDefaultAction": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Allow",
                                                "Deny"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Default action for main access restriction if no rules are matched."
                                              }
                                            },
                                            "javaContainer": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Java container."
                                              }
                                            },
                                            "javaContainerVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Java container version."
                                              }
                                            },
                                            "javaVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Java version."
                                              }
                                            },
                                            "keyVaultReferenceIdentity": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Identity to use for Key Vault Reference authentication."
                                              }
                                            },
                                            "limits": {
                                              "type": "object",
                                              "properties": {
                                                "maxDiskSizeInMb": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Maximum allowed disk size usage in MB."
                                                  }
                                                },
                                                "maxMemoryInMb": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Maximum allowed memory usage in MB."
                                                  }
                                                },
                                                "maxPercentageCpu": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Maximum allowed CPU usage percentage."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Site limits."
                                              }
                                            },
                                            "linuxFxVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Linux App Framework and version."
                                              }
                                            },
                                            "loadBalancing": {
                                              "type": "string",
                                              "allowedValues": [
                                                "LeastRequests",
                                                "LeastRequestsWithTieBreaker",
                                                "LeastResponseTime",
                                                "PerSiteRoundRobin",
                                                "RequestHash",
                                                "WeightedRoundRobin",
                                                "WeightedTotalTraffic"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Site load balancing."
                                              }
                                            },
                                            "localMySqlEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` to enable local MySQL."
                                              }
                                            },
                                            "logsDirectorySizeLimit": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. HTTP logs directory size limit."
                                              }
                                            },
                                            "managedPipelineMode": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Classic",
                                                "Integrated"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Managed pipeline mode."
                                              }
                                            },
                                            "managedServiceIdentityId": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Managed Service Identity Id."
                                              }
                                            },
                                            "metadata": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. Pair name."
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. Pair Value."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                                              }
                                            },
                                            "minimumElasticInstanceCount": {
                                              "type": "int",
                                              "nullable": true,
                                              "minValue": 0,
                                              "maxValue": 20,
                                              "metadata": {
                                                "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                                              }
                                            },
                                            "minTlsCipherSuite": {
                                              "type": "string",
                                              "allowedValues": [
                                                "TLS_AES_128_GCM_SHA256",
                                                "TLS_AES_256_GCM_SHA384",
                                                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                                "TLS_RSA_WITH_AES_128_CBC_SHA",
                                                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                                "TLS_RSA_WITH_AES_256_CBC_SHA",
                                                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                                "TLS_RSA_WITH_AES_256_GCM_SHA384"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                                              }
                                            },
                                            "minTlsVersion": {
                                              "type": "string",
                                              "allowedValues": [
                                                "1.0",
                                                "1.1",
                                                "1.2",
                                                "1.3"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                                              }
                                            },
                                            "netFrameworkVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. .NET Framework version."
                                              }
                                            },
                                            "nodeVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Version of Node.js."
                                              }
                                            },
                                            "numberOfWorkers": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Number of workers."
                                              }
                                            },
                                            "phpVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Version of PHP."
                                              }
                                            },
                                            "powerShellVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Version of PowerShell."
                                              }
                                            },
                                            "preWarmedInstanceCount": {
                                              "type": "int",
                                              "nullable": true,
                                              "minValue": 0,
                                              "maxValue": 10,
                                              "metadata": {
                                                "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                                              }
                                            },
                                            "publicNetworkAccess": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Property to allow or block all public traffic."
                                              }
                                            },
                                            "publishingUsername": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Publishing user name."
                                              }
                                            },
                                            "push": {
                                              "type": "object",
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Kind of resource."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "dynamicTagsJson": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                                                      }
                                                    },
                                                    "isPushEnabled": {
                                                      "type": "bool",
                                                      "metadata": {
                                                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                                                      }
                                                    },
                                                    "tagsRequiringAuth": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                                                      }
                                                    },
                                                    "tagWhitelistJson": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. PushSettings resource specific properties."
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Push endpoint settings."
                                              }
                                            },
                                            "pythonVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Version of Python."
                                              }
                                            },
                                            "remoteDebuggingEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if remote debugging is enabled."
                                              }
                                            },
                                            "remoteDebuggingVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Remote debugging version."
                                              }
                                            },
                                            "requestTracingEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if request tracing is enabled."
                                              }
                                            },
                                            "requestTracingExpirationTime": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Request tracing expiration time."
                                              }
                                            },
                                            "scmIpSecurityRestrictions": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/scmIpSecurityRestrictionType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. IP security restrictions for scm."
                                              }
                                            },
                                            "scmIpSecurityRestrictionsDefaultAction": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Allow",
                                                "Deny"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Default action for scm access restriction if no rules are matched."
                                              }
                                            },
                                            "scmIpSecurityRestrictionsUseMain": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. IP security restrictions for scm to use main."
                                              }
                                            },
                                            "scmMinTlsVersion": {
                                              "type": "string",
                                              "allowedValues": [
                                                "1.0",
                                                "1.1",
                                                "1.2",
                                                "1.3"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                                              }
                                            },
                                            "scmType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "BitbucketGit",
                                                "BitbucketHg",
                                                "CodePlexGit",
                                                "CodePlexHg",
                                                "Dropbox",
                                                "ExternalGit",
                                                "ExternalHg",
                                                "GitHub",
                                                "LocalGit",
                                                "None",
                                                "OneDrive",
                                                "Tfs",
                                                "VSO",
                                                "VSTSRM"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. SCM type."
                                              }
                                            },
                                            "tracingOptions": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tracing options."
                                              }
                                            },
                                            "use32BitWorkerProcess": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` to use 32-bit worker process."
                                              }
                                            },
                                            "virtualApplications": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "physicalPath": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Physical path."
                                                    }
                                                  },
                                                  "preloadEnabled": {
                                                    "type": "bool",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Set to `true` if preloading is enabled."
                                                    }
                                                  },
                                                  "virtualDirectories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "physicalPath": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Physical path."
                                                          }
                                                        },
                                                        "virtualPath": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Path to virtual application."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Virtual directories for virtual application."
                                                    }
                                                  },
                                                  "virtualPath": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Virtual path."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Virtual applications."
                                              }
                                            },
                                            "vnetName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Virtual Network name."
                                              }
                                            },
                                            "vnetPrivatePortsCount": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                                              }
                                            },
                                            "vnetRouteAllEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                                              }
                                            },
                                            "websiteTimeZone": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                                              }
                                            },
                                            "webSocketsEnabled": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set to `true` if WebSocket is enabled."
                                              }
                                            },
                                            "windowsFxVersion": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Xenon App Framework and version."
                                              }
                                            },
                                            "xManagedServiceIdentityId": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Explicit Managed Service Identity Id."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The config settings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a web configuration."
                                      }
                                    },
                                    "slowRequestBasedTriggerType": {
                                      "type": "object",
                                      "properties": {
                                        "count": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Request Count."
                                          }
                                        },
                                        "path": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Request Path."
                                          }
                                        },
                                        "timeInterval": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Time interval."
                                          }
                                        },
                                        "timeTaken": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Time taken."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type of aslow request based trigger."
                                      }
                                    },
                                    "scmIpSecurityRestrictionType": {
                                      "type": "object",
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Allow",
                                            "Deny"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Allow or Deny access for this IP range."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. IP restriction rule description."
                                          }
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "additionalProperties": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A header."
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                                          }
                                        },
                                        "ipAddress": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                                          }
                                        },
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. IP restriction rule name."
                                          }
                                        },
                                        "priority": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Priority of IP restriction rule."
                                          }
                                        },
                                        "subnetMask": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                                          }
                                        },
                                        "subnetTrafficTag": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. (internal) Subnet traffic tag."
                                          }
                                        },
                                        "tag": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Default",
                                            "ServiceTag",
                                            "XffProxy"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                                          }
                                        },
                                        "vnetSubnetResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Virtual network resource id."
                                          }
                                        },
                                        "vnetTrafficTag": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. (internal) Vnet traffic tag."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type of a IP security restriction."
                                      }
                                    },
                                    "basicPublishingCredentialsPolicyType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "ftp",
                                            "scm"
                                          ],
                                          "metadata": {
                                            "description": "Required. The name of the resource."
                                          }
                                        },
                                        "allow": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set to true to enable or false to disable a publishing method."
                                          }
                                        },
                                        "location": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Location for all Resources."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a basic publishing credential policy."
                                      }
                                    },
                                    "hybridConnectionRelayType": {
                                      "type": "object",
                                      "properties": {
                                        "hybridConnectionResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource ID of the relay namespace hybrid connection."
                                          }
                                        },
                                        "sendKeyName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the authorization rule send key to use."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a hybrid connection relay."
                                      }
                                    },
                                    "_1.privateEndpointCustomDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "_1.privateEndpointIpConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The name of the private DNS Zone Group config."
                                                }
                                              },
                                              "privateDnsZoneResourceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of the private DNS zone."
                                                }
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        },
                                        "notes": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the notes of the lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "managedIdentityAllType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "privateEndpointSingleServiceType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private Endpoint."
                                          }
                                        },
                                        "location": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The location to deploy the Private Endpoint to."
                                          }
                                        },
                                        "privateLinkServiceConnectionName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private link connection to create."
                                          }
                                        },
                                        "service": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                                          }
                                        },
                                        "subnetResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                          }
                                        },
                                        "resourceGroupResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                          }
                                        },
                                        "privateDnsZoneGroup": {
                                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                                          }
                                        },
                                        "isManualConnection": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If Manual Private Link Connection is required."
                                          }
                                        },
                                        "manualConnectionRequestMessage": {
                                          "type": "string",
                                          "nullable": true,
                                          "maxLength": 140,
                                          "metadata": {
                                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                          }
                                        },
                                        "customDnsConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Custom DNS configurations."
                                          }
                                        },
                                        "ipConfigurations": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                                          }
                                        },
                                        "applicationSecurityGroupResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                                          }
                                        },
                                        "customNetworkInterfaceName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                                          }
                                        },
                                        "lock": {
                                          "$ref": "#/definitions/lockType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        },
                                        "roleAssignments": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/roleAssignmentType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Array of role assignments to create."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                                          }
                                        },
                                        "enableTelemetry": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable/Disable usage telemetry for module."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the slot."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "serverFarmResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service plan to use for the slot."
                                      }
                                    },
                                    "managedEnvironmentResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                                      }
                                    },
                                    "httpsOnly": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                                      }
                                    },
                                    "clientAffinityEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. If client affinity is enabled."
                                      }
                                    },
                                    "clientAffinityProxyEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. To enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is true."
                                      }
                                    },
                                    "clientAffinityPartitioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable client affinity partitioning using CHIPS cookies, this will add the partitioned property to the affinity cookies; false to stop sending partitioned affinity cookies. Default is false."
                                      }
                                    },
                                    "appServiceEnvironmentResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentityAllType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource."
                                      }
                                    },
                                    "keyVaultAccessIdentityResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                                      }
                                    },
                                    "storageAccountRequired": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Checks if Customer provided storage account is required."
                                      }
                                    },
                                    "virtualNetworkSubnetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                                      }
                                    },
                                    "siteConfig": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                                        },
                                        "description": "Optional. The site config object."
                                      },
                                      "defaultValue": {
                                        "alwaysOn": true
                                      }
                                    },
                                    "functionAppConfig": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The Function App config object."
                                      }
                                    },
                                    "configs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/configType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The web site config."
                                      }
                                    },
                                    "extensions": {
                                      "type": "array",
                                      "items": {
                                        "type": "object"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The extensions configuration."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "privateEndpoints": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Configuration details for private endpoints."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/tags"
                                        },
                                        "description": "Optional. Tags of the resource."
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "clientCertEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                                      }
                                    },
                                    "clientCertExclusionPaths": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                                      }
                                    },
                                    "clientCertMode": {
                                      "type": "string",
                                      "defaultValue": "Optional",
                                      "allowedValues": [
                                        "Optional",
                                        "OptionalInteractiveUser",
                                        "Required"
                                      ],
                                      "metadata": {
                                        "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                                      }
                                    },
                                    "cloningInfo": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                                      }
                                    },
                                    "containerSize": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Size of the function container."
                                      }
                                    },
                                    "customDomainVerificationId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                                      }
                                    },
                                    "dailyMemoryTimeQuota": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                                      }
                                    },
                                    "hostNameSslStates": {
                                      "type": "array",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                                        },
                                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                                      },
                                      "nullable": true
                                    },
                                    "hyperV": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Hyper-V sandbox."
                                      }
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Allow or block all public traffic."
                                      }
                                    },
                                    "redundancyMode": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "ActiveActive",
                                        "Failover",
                                        "GeoRedundant",
                                        "Manual",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Site redundancy mode."
                                      }
                                    },
                                    "basicPublishingCredentialsPolicies": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                                      }
                                    },
                                    "outboundVnetRouting": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/slots@2024-11-01#properties/properties/properties/outboundVnetRouting"
                                        },
                                        "description": "Optional. The outbound VNET routing configuration for the site."
                                      },
                                      "nullable": true
                                    },
                                    "hybridConnectionRelays": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/hybridConnectionRelayType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Names of hybrid connection relays to connect app with."
                                      }
                                    },
                                    "dnsConfiguration": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                                        },
                                        "description": "Optional. Property to configure various DNS related settings for a site."
                                      },
                                      "nullable": true
                                    },
                                    "autoGeneratedDomainNameLabelScope": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "NoReuse",
                                        "ResourceGroupReuse",
                                        "SubscriptionReuse",
                                        "TenantReuse"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "enableReferencedModulesTelemetry": false,
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                                    },
                                    "managedEnvironmentSupportedKinds": [
                                      "functionapp,linux,container,azurecontainerapps"
                                    ]
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2024-11-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "slot": {
                                      "type": "Microsoft.Web/sites/slots",
                                      "apiVersion": "2024-11-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": {
                                        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentResourceId'))), parameters('managedEnvironmentResourceId'), null())]",
                                        "serverFarmId": "[if(and(contains(variables('managedEnvironmentSupportedKinds'), parameters('kind')), or(not(empty(reference('app').managedEnvironmentId)), not(empty(parameters('managedEnvironmentResourceId'))))), null(), parameters('serverFarmResourceId'))]",
                                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                        "clientAffinityProxyEnabled": "[parameters('clientAffinityProxyEnabled')]",
                                        "clientAffinityPartitioningEnabled": "[parameters('clientAffinityPartitioningEnabled')]",
                                        "httpsOnly": "[parameters('httpsOnly')]",
                                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]",
                                        "siteConfig": "[parameters('siteConfig')]",
                                        "functionAppConfig": "[parameters('functionAppConfig')]",
                                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                        "clientCertMode": "[parameters('clientCertMode')]",
                                        "cloningInfo": "[parameters('cloningInfo')]",
                                        "containerSize": "[parameters('containerSize')]",
                                        "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                        "enabled": "[parameters('enabled')]",
                                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                        "hyperV": "[parameters('hyperV')]",
                                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                        "redundancyMode": "[parameters('redundancyMode')]",
                                        "dnsConfiguration": "[parameters('dnsConfiguration')]",
                                        "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                                        "outboundVnetRouting": "[parameters('outboundVnetRouting')]"
                                      },
                                      "dependsOn": [
                                        "app"
                                      ]
                                    },
                                    "slot_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_diagnosticSettings": {
                                      "copy": {
                                        "name": "slot_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_roleAssignments": {
                                      "copy": {
                                        "name": "slot_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_basicPublishingCredentialsPolicies": {
                                      "copy": {
                                        "name": "slot_basicPublishingCredentialsPolicies",
                                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                          },
                                          "allow": {
                                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.177.2456",
                                              "templateHash": "1983411224633209730"
                                            },
                                            "name": "Web Site Slot Basic Publishing Credentials Policies",
                                            "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "allowedValues": [
                                                "scm",
                                                "ftp"
                                              ],
                                              "metadata": {
                                                "description": "Required. The name of the resource."
                                              }
                                            },
                                            "allow": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                                              "apiVersion": "2024-04-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "properties": {
                                                "allow": "[parameters('allow')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the basic publishing credential policy."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the basic publishing credential policy."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2024-04-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_hybridConnectionRelays": {
                                      "copy": {
                                        "name": "slot_hybridConnectionRelays",
                                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "hybridConnectionResourceId": {
                                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                                          },
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "sendKeyName": {
                                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.177.2456",
                                              "templateHash": "17747975671959926329"
                                            },
                                            "name": "Web/Function Apps Slot Hybrid Connection Relay",
                                            "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay."
                                          },
                                          "parameters": {
                                            "hybridConnectionResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "sendKeyName": {
                                              "type": "string",
                                              "defaultValue": "defaultSender",
                                              "metadata": {
                                                "description": "Optional. Name of the authorization rule send key to use."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                                              "apiVersion": "2024-04-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                              "properties": {
                                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                                                "sendKeyName": "[parameters('sendKeyName')]",
                                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the hybrid connection relay.."
                                              },
                                              "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the hybrid connection relay."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the resource was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_config": {
                                      "copy": {
                                        "name": "slot_config",
                                        "count": "[length(coalesce(parameters('configs'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "applicationInsightResourceId": {
                                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                                          },
                                          "properties": {
                                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                                          },
                                          "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                                          "storageAccountResourceId": {
                                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                                          },
                                          "storageAccountUseIdentityAuthentication": {
                                            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.177.2456",
                                              "templateHash": "16144301784822003794"
                                            },
                                            "name": "Site App Settings",
                                            "description": "This module deploys a Site App Setting."
                                          },
                                          "parameters": {
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "allowedValues": [
                                                "appsettings",
                                                "authsettings",
                                                "authsettingsV2",
                                                "azurestorageaccounts",
                                                "backup",
                                                "connectionstrings",
                                                "logs",
                                                "metadata",
                                                "pushsettings",
                                                "web"
                                              ],
                                              "metadata": {
                                                "description": "Required. The name of the config."
                                              }
                                            },
                                            "properties": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                                              }
                                            },
                                            "currentAppSettings": {
                                              "type": "object",
                                              "properties": {},
                                              "additionalProperties": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The key-values pairs of the current app settings."
                                                }
                                              },
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. The current app settings."
                                              }
                                            },
                                            "storageAccountUseIdentityAuthentication": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                              }
                                            },
                                            "storageAccountResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                              }
                                            },
                                            "applicationInsightResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the application insight to leverage for this resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "app::slot": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites/slots",
                                              "apiVersion": "2023-12-01",
                                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                                            },
                                            "applicationInsights": {
                                              "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                                              "existing": true,
                                              "type": "Microsoft.Insights/components",
                                              "apiVersion": "2020-02-02",
                                              "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                                              "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                                              "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                                            },
                                            "storageAccount": {
                                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2025-01-01",
                                              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                                              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                            },
                                            "app": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites",
                                              "apiVersion": "2023-12-01",
                                              "name": "[parameters('appName')]"
                                            },
                                            "config": {
                                              "type": "Microsoft.Web/sites/slots/config",
                                              "apiVersion": "2024-04-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                              "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2025-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                                              "dependsOn": [
                                                "applicationInsights",
                                                "storageAccount"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the site config."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the site config."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the site config was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "app_extensions": {
                                      "copy": {
                                        "name": "app_extensions",
                                        "count": "[length(coalesce(parameters('extensions'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-Extension={1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'name')]"
                                          },
                                          "kind": {
                                            "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'kind')]"
                                          },
                                          "properties": {
                                            "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.177.2456",
                                              "templateHash": "6698755633989137714"
                                            },
                                            "name": "Site Deployment Extension ",
                                            "description": "This module deploys a Site extension for MSDeploy."
                                          },
                                          "parameters": {
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "MSDeploy",
                                              "allowedValues": [
                                                "MSDeploy"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The name of the extension."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "defaultValue": "MSDeploy",
                                              "allowedValues": [
                                                "MSDeploy"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The kind of extension."
                                              }
                                            },
                                            "properties": {
                                              "type": "object",
                                              "metadata": {
                                                "__bicep_resource_derived_type!": {
                                                  "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                                                },
                                                "description": "Optional. Sets the properties."
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "resources": {
                                            "app::slot": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites/slots",
                                              "apiVersion": "2024-04-01",
                                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                                            },
                                            "app": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites",
                                              "apiVersion": "2024-04-01",
                                              "name": "[parameters('appName')]"
                                            },
                                            "msdeploy": {
                                              "type": "Microsoft.Web/sites/slots/extensions",
                                              "apiVersion": "2024-04-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                              "kind": "[parameters('kind')]",
                                              "properties": "[parameters('properties')]"
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/extensions', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the extensino was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_privateEndpoints": {
                                      "copy": {
                                        "name": "slot_privateEndpoints",
                                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                                          },
                                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                          "subnetResourceId": {
                                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          },
                                          "location": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                          },
                                          "lock": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                          },
                                          "privateDnsZoneGroup": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "customDnsConfigs": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                          },
                                          "ipConfigurations": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                          },
                                          "applicationSecurityGroupResourceIds": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                          },
                                          "customNetworkInterfaceName": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.34.44.8038",
                                              "templateHash": "12389807800450456797"
                                            },
                                            "name": "Private Endpoints",
                                            "description": "This module deploys a Private Endpoint."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the Private DNS Zone Group."
                                                  }
                                                },
                                                "privateDnsZoneGroupConfigs": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                                  },
                                                  "metadata": {
                                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "ipConfigurationType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the resource that is unique within a resource group."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "groupId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                      }
                                                    },
                                                    "memberName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                      }
                                                    },
                                                    "privateIPAddress": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                      }
                                                    }
                                                  },
                                                  "metadata": {
                                                    "description": "Required. Properties of private endpoint IP configurations."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "privateLinkServiceConnectionType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the private link service connection."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "groupIds": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "metadata": {
                                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                      }
                                                    },
                                                    "privateLinkServiceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource id of private link service."
                                                      }
                                                    },
                                                    "requestMessage": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                      }
                                                    }
                                                  },
                                                  "metadata": {
                                                    "description": "Required. Properties of private link service connection."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "customDnsConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                                  }
                                                },
                                                "ipAddresses": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "metadata": {
                                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a lock.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            },
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                                }
                                              }
                                            },
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the private endpoint resource to create."
                                              }
                                            },
                                            "subnetResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                              }
                                            },
                                            "applicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                              }
                                            },
                                            "customNetworkInterfaceName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/ipConfigurationType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                              }
                                            },
                                            "privateDnsZoneGroup": {
                                              "$ref": "#/definitions/privateDnsZoneGroupType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                              }
                                            },
                                            "customDnsConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/customDnsConfigType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Custom DNS configurations."
                                              }
                                            },
                                            "manualPrivateLinkServiceConnections": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                              }
                                            },
                                            "privateLinkServiceConnections": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "privateEndpoint": {
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2024-05-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "applicationSecurityGroups",
                                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                                    "input": {
                                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                                    }
                                                  }
                                                ],
                                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                                "subnet": {
                                                  "id": "[parameters('subnetResourceId')]"
                                                }
                                              }
                                            },
                                            "privateEndpoint_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            },
                                            "privateEndpoint_roleAssignments": {
                                              "copy": {
                                                "name": "privateEndpoint_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            },
                                            "privateEndpoint_privateDnsZoneGroup": {
                                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                                  },
                                                  "privateEndpointName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "privateDnsZoneConfigs": {
                                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.34.44.8038",
                                                      "templateHash": "13997305779829540948"
                                                    },
                                                    "name": "Private Endpoint Private DNS Zone Groups",
                                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                                  },
                                                  "definitions": {
                                                    "privateDnsZoneGroupConfigType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the private DNS zone group config."
                                                          }
                                                        },
                                                        "privateDnsZoneResourceId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The resource id of the private DNS zone."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    }
                                                  },
                                                  "parameters": {
                                                    "privateEndpointName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "privateDnsZoneConfigs": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                                      },
                                                      "minLength": 1,
                                                      "maxLength": 5,
                                                      "metadata": {
                                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                                      }
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "defaultValue": "default",
                                                      "metadata": {
                                                        "description": "Optional. The name of the private DNS zone group."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "copy": [
                                                      {
                                                        "name": "privateDnsZoneConfigsVar",
                                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                        "input": {
                                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                          "properties": {
                                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "resources": {
                                                    "privateEndpoint": {
                                                      "existing": true,
                                                      "type": "Microsoft.Network/privateEndpoints",
                                                      "apiVersion": "2024-05-01",
                                                      "name": "[parameters('privateEndpointName')]"
                                                    },
                                                    "privateDnsZoneGroup": {
                                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                                      "apiVersion": "2024-05-01",
                                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                                      "properties": {
                                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                                      }
                                                    }
                                                  },
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the private endpoint DNS zone group."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the private endpoint DNS zone group."
                                                      },
                                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                                            },
                                            "customDnsConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/customDnsConfigType"
                                              },
                                              "metadata": {
                                                "description": "The custom DNS configurations of the private endpoint."
                                              },
                                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                                            },
                                            "networkInterfaceResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                              },
                                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                            },
                                            "groupId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "The group Id for the private endpoint Group."
                                              },
                                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[tryGet(tryGet(reference('slot', '2024-11-01', 'full'), 'identity'), 'principalId')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('slot', '2024-11-01', 'full').location]"
                                    },
                                    "privateEndpoints": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateEndpointOutputType"
                                      },
                                      "metadata": {
                                        "description": "The private endpoints of the slot."
                                      },
                                      "copy": {
                                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                        "input": {
                                          "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                          "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                          "groupId": "[tryGet(tryGet(reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                          "customDnsConfigs": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                          "networkInterfaceResourceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_basicPublishingCredentialsPolicies": {
                              "copy": {
                                "name": "app_basicPublishingCredentialsPolicies",
                                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "webAppName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                  },
                                  "allow": {
                                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "12652181755858940163"
                                    },
                                    "name": "Web Site Basic Publishing Credentials Policies",
                                    "description": "This module deploys a Web Site Basic Publishing Credentials Policy."
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "scm",
                                        "ftp"
                                      ],
                                      "metadata": {
                                        "description": "Required. The name of the resource."
                                      }
                                    },
                                    "allow": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                                      }
                                    },
                                    "webAppName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                                      "apiVersion": "2024-04-01",
                                      "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "allow": "[parameters('allow')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the basic publishing credential policy."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the basic publishing credential policy."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2024-04-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_hybridConnectionRelays": {
                              "copy": {
                                "name": "app_hybridConnectionRelays",
                                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "hybridConnectionResourceId": {
                                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                                  },
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sendKeyName": {
                                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "9219991038433059021"
                                    },
                                    "name": "Web/Function Apps Hybrid Connection Relay",
                                    "description": "This module deploys a Site Hybrid Connection Namespace Relay."
                                  },
                                  "parameters": {
                                    "hybridConnectionResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sendKeyName": {
                                      "type": "string",
                                      "defaultValue": "defaultSender",
                                      "metadata": {
                                        "description": "Optional. Name of the authorization rule send key to use."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                                      "apiVersion": "2024-04-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                      "properties": {
                                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2024-01-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[0]]",
                                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2024-01-01').userMetadata)[0].value, ':')[1])]",
                                        "sendKeyName": "[parameters('sendKeyName')]",
                                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2024-01-01').primaryKey]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the hybrid connection relay.."
                                      },
                                      "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the hybrid connection relay."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the resource was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_privateEndpoints": {
                              "copy": {
                                "name": "app_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "12389807800450456797"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "privateLinkServiceConnectionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the private link service connection."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                              }
                                            },
                                            "privateLinkServiceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of private link service."
                                              }
                                            },
                                            "requestMessage": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private link service connection."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "customDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ipConfigurationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.34.44.8038",
                                              "templateHash": "13997305779829540948"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2024-05-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2024-05-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site."
                              },
                              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[tryGet(tryGet(reference('app', '2024-11-01', 'full'), 'identity'), 'principalId')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('app', '2024-11-01', 'full').location]"
                            },
                            "defaultHostname": {
                              "type": "string",
                              "metadata": {
                                "description": "Default hostname of the app."
                              },
                              "value": "[reference('app').defaultHostName]"
                            },
                            "customDomainVerificationId": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                              },
                              "value": "[reference('app').customDomainVerificationId]"
                            },
                            "outboundIpAddresses": {
                              "type": "string",
                              "metadata": {
                                "description": "The outbound IP addresses of the app."
                              },
                              "value": "[reference('app').outboundIpAddresses]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointOutputType"
                              },
                              "metadata": {
                                "description": "The private endpoints of the site."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                "input": {
                                  "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[tryGet(tryGet(reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                  "customDnsConfigs": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                  "networkInterfaceResourceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                }
                              }
                            },
                            "slots": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "The name of the slot."
                                    }
                                  },
                                  "resourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "The resource ID of the slot."
                                    }
                                  },
                                  "systemAssignedMIPrincipalId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "The principal ID of the system assigned identity of the slot."
                                    }
                                  },
                                  "privateEndpoints": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/definitions/privateEndpointOutputType"
                                    },
                                    "metadata": {
                                      "description": "The private endpoints of the slot."
                                    }
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The slots of the site."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "input": {
                                  "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                                  "resourceId": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "systemAssignedMIPrincipalId": "[coalesce(tryGet(tryGet(reference(format('app_slots[{0}]', copyIndex())).outputs, 'systemAssignedMIPrincipalId'), 'value'), '')]",
                                  "privateEndpoints": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'appServicePlanDeployment')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "backofficeRG"
              ]
            }
          }
        }
      }
    },
    "resourceGroupCommon": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resourceGroupCommon-{0}', uniqueString('resourceGroupCommon', deployment().name))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentType": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4224031063417519057"
            }
          },
          "parameters": {
            "environmentType": {
              "type": "string",
              "metadata": {
                "description": "The environment in which the deployment is done.)"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "WestEurope"
            }
          },
          "resources": {
            "commonRG": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2025-04-01",
              "name": "rg-dev-common",
              "location": "WestEurope",
              "tags": {
                "Environment": "dev"
              }
            },
            "registry": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('registry-{0}', uniqueString('registry', deployment().name))]",
              "resourceGroup": "rg-dev-common",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "environmentType": {
                    "value": "[parameters('environmentType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "12749994911706368361"
                    }
                  },
                  "parameters": {
                    "environmentType": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment in which the deployment is done.)"
                      }
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "containerRegistryName": "[format('crmarad{0}', parameters('environmentType'))]"
                  },
                  "resources": {
                    "containerRegistry": {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2025-04-01",
                      "name": "[variables('containerRegistryName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "dataEndpointEnabled": false,
                        "encryption": {
                          "status": "disabled"
                        },
                        "policies": {
                          "exportPolicy": {
                            "status": "enabled"
                          },
                          "retentionPolicy": {
                            "days": 7,
                            "status": "disabled"
                          }
                        },
                        "adminUserEnabled": true
                      },
                      "sku": {
                        "name": "Standard"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "commonRG"
              ]
            },
            "vNet": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('vNet-{0}', uniqueString('vNet', deployment().name))]",
              "resourceGroup": "rg-dev-common",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "environmentType": {
                    "value": "[parameters('environmentType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17162832809275844399"
                    }
                  },
                  "parameters": {
                    "environmentType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-07-01",
                      "name": "[format('vnet-{0}-{1}', parameters('environmentType'), parameters('location'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "privateEndpointVNetPolicies": "Disabled",
                        "addressSpace": {
                          "addressPrefixes": [
                            "10.0.0.0/16"
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "commonRG"
              ]
            }
          }
        }
      }
    }
  }
}